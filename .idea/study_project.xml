<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="course">
        <RemoteCourse>
          <option name="adaptive" value="false" />
          <option name="additionalMaterialsUpdateDate" value="1532616891000" />
          <option name="authors">
            <list>
              <StepicUser>
                <option name="accessToken" value="" />
                <option name="firstName" value="JetBrains" />
                <option name="guest" value="false" />
                <option name="id" value="17813950" />
                <option name="lastName" value="" />
                <option name="refreshToken" value="" />
              </StepicUser>
            </list>
          </option>
          <option name="compatible" value="true" />
          <option name="courseMode" value="Study" />
          <option name="courseType" value="PyCharm" />
          <option name="customPresentableName" />
          <option name="description" value="This course provides an introduction to the standard Python logging module. It includes basic and advanced examples that can help you debug your Python software. Best practices are demonstrated to help you get the most out of Python logging. This course was tested using Python 2.7 and Python 3.6." />
          <option name="id" value="3215" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="17813950" />
            </list>
          </option>
          <option name="language" value="Python" />
          <option name="languageCode" value="en" />
          <option name="loadSolutions" value="true" />
          <option name="name" value="Logging in Python" />
          <option name="public" value="true" />
          <option name="sectionIds">
            <list>
              <option value="6515" />
              <option value="6516" />
            </list>
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="type" value="pycharm2 Python" />
          <option name="updateDate" value="1532617323000" />
          <option name="items">
            <list>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="50395" />
                <option name="index" value="1" />
                <option name="name" value="Basics" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1513857694000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;The following code is typical of how many people start debugging their programs using the &quot;print&quot; function.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The problem with using &quot;print&quot; to output debugging information, is it does not work well in&#10;larger programs. The debug output interferes with application output and you typically end up commenting out or&#10;removing all this extra code when you are not debugging.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The standard logging module provides an easy way to separate application output from debug output.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, replace the highlighted &quot;print&quot; function calls with calls to &quot;logging.debug&quot;.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Replacing print" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202524" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    for placeholder in placeholders:&#10;        if placeholder != &quot;logging.debug&quot;:&#10;            failed()&#10;            return&#10;&#10;    passed()&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857688000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="replacing_print.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace function print with logging.debug" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="5" />
                                          <option name="offset" value="99" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="5" />
                                      <option name="offset" value="99" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="print" />
                                      <option name="possibleAnswer" value="logging.debug" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace function print with logging.debug" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="5" />
                                          <option name="offset" value="210" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="5" />
                                      <option name="offset" value="210" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="print" />
                                      <option name="possibleAnswer" value="logging.debug" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace function print with logging.debug" />
                                        </list>
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="5" />
                                          <option name="offset" value="324" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="5" />
                                      <option name="offset" value="324" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="print" />
                                      <option name="possibleAnswer" value="logging.debug" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace function print with logging.debug" />
                                        </list>
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="5" />
                                          <option name="offset" value="436" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="5" />
                                      <option name="offset" value="436" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="print" />
                                      <option name="possibleAnswer" value="logging.debug" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace function print with logging.debug" />
                                        </list>
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="5" />
                                          <option name="offset" value="565" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="5" />
                                      <option name="offset" value="565" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="print" />
                                      <option name="possibleAnswer" value="logging.debug" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace function print with logging.debug" />
                                        </list>
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="5" />
                                          <option name="offset" value="611" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="5" />
                                      <option name="offset" value="611" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="print" />
                                      <option name="possibleAnswer" value="logging.debug" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="replacing_print.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;def get_current_rate(years):&#10;    print('Fetching current interest rate for %d years' % years)&#10;    rate = 7.5   # Stub external service call&#10;    print('Service returned interest rate %f' % rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    print('Calling mortgage calculator')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    print('Number of monthly payments %d' % payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    print('Calculated result is %f' % result)&#10;    print('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    payment = get_monthly_payment(100000, 30)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In the previous task, only the application output was written to standard output. You do not see any&#10;of the debugging statements.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;There is no output because a default &quot;Logger&quot; instance was created for you by the &quot;logging&quot; module and the&#10;logging level was set to WARNING level. This default &quot;Logger&quot; is also known as the &quot;root&quot; Logger.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The WARNING level is an example of how we can tag our log statements with a severity level and perform filtering&#10;based on the level.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The &quot;basicConfig()&quot; function is a helper method for doing basic configuration of logging. Without any parameters, it&#10;will create a StreamHandler that writes logging output to the &quot;stderr&quot; output stream. We can also pass a keyword&#10;argument &quot;level&quot; to set the default logger level.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task using &quot;basicConfig()&quot;, set the logging level to a value of &quot;logging.DEBUG&quot;. This will allow our debug statements to show up on stderr.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Log output" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202525" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;level=logging.DEBUG&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857688000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="log_output.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Pass a keyword argument of &quot;level&quot; and value of &quot;logging.DEBUG&quot;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="25" />
                                          <option name="offset" value="766" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="25" />
                                      <option name="offset" value="766" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="set default logging level" />
                                      <option name="possibleAnswer" value="level=logging.DEBUG" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="log_output.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;def get_current_rate(years):&#10;    logging.debug('Fetching current interest rate for %d years' % years)&#10;    rate = 7.5   # Stub external service call&#10;    logging.debug('Service returned interest rate %f' % rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logging.debug('Calling mortgage calculator')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logging.debug('Number of monthly payments %d' % payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logging.debug('Calculated result is %f' % result)&#10;    logging.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(set default logging level)&#10;    payment = get_monthly_payment(100000, 30)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;The logging module provides five logging levels. The levels allow you to control what messages are&#10;included in the output stream.  Five levels is usually good for most applications, as having more levels just&#10;leads to confusion about which level to use.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Each level is known by a constant (in all caps) and has a numeric value. The value comes into play when setting&#10;a log level on a logger. Only messages at the logger's current logging level or greater is output.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;pre&gt;LEVEL NAME         | FUNCTION                | VALUE&#10;===================+=========================+==========&#10;CRITICAL           | critical()              | 50&#10;ERROR              | error()                 | 40&#10;WARNING            | warning() or warn()     | 30&#10;INFO               | info()                  | 20&#10;DEBUG              | debug()                 | 10&#10;&lt;/pre&gt;&#10;&lt;br&gt;&#10;(1) Change the &quot;Calling mortgage calculator&quot; call to log with an INFO level.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;(2) Then log a WARNING level message when the years is greater than 50.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Levels" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202526" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;info&quot;:&#10;        passed()&#10;    else:&#10;        failed('Sorry, that is not correct. Please use the info() method.')&#10;&#10;    if placeholders[1].startswith('logging.warn'):&#10;        passed()&#10;    else:&#10;        failed('Sorry, that is not correct. Place use the warn() method.')&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857688000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="levels.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Log an info level message using the info() method.&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="5" />
                                          <option name="offset" value="348" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="5" />
                                      <option name="offset" value="348" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="debug" />
                                      <option name="possibleAnswer" value="info" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Use the logging.warning method. Remember to pass a string argument.&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="34" />
                                          <option name="offset" value="413" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="34" />
                                      <option name="offset" value="413" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="write_a_warning_message_to_logging" />
                                      <option name="possibleAnswer" value="logging.warning(&quot;Term greater than 50 years&quot;)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="levels.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;def get_current_rate(years):&#10;    logging.debug('Fetching current interest rate for %d years' % years)&#10;    rate = 7.5   # Stub external service call&#10;    logging.debug('Service returned interest rate %f' % rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logging.debug('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        write_a_warning_message_to_logging&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logging.debug('Number of monthly payments %d' % payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logging.debug('Calculated result is %f' % result)&#10;    logging.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;    payment = get_monthly_payment(100000, 30)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;The previous tasks have been logging messages through helper functions provided in the logging library and using&#10;the root Logger.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Typically you will get local Logger objects for each module and call logging functions on that object. This&#10;is done by calling &quot;logging.getLogger()&quot; which returns a Logger object for a given name. You should never directly&#10;create instances of a Logger object.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Calling &quot;logging.getLogger()&quot; with no arguments, will return the root Logger.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, we have created a module scoped &quot;logger&quot; instance with the name &quot;mortgage&quot;. Replace the logging calls with references to this instance.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;After you execute this code, you should notice the name &quot;mortgage&quot; is now included in the output.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Loggers" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202527" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    for placeholder in placeholders:&#10;        if placeholder != 'logger':&#10;            failed('Sorry, that is not correct. Please replace all instances of &quot;logging&quot; with &quot;logger&quot;')&#10;            return&#10;    passed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857688000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="loggers.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace with a call using the logger instance." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="7" />
                                          <option name="offset" value="139" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="139" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logging" />
                                      <option name="possibleAnswer" value="logger" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace with a call using the logger instance." />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="7" />
                                          <option name="offset" value="258" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="258" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logging" />
                                      <option name="possibleAnswer" value="logger" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace with a call using the logger instance." />
                                        </list>
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="7" />
                                          <option name="offset" value="380" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="380" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logging" />
                                      <option name="possibleAnswer" value="logger" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace with a call using the logger instance." />
                                        </list>
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="7" />
                                          <option name="offset" value="452" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="452" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logging" />
                                      <option name="possibleAnswer" value="logger" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace with a call using the logger instance." />
                                        </list>
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="7" />
                                          <option name="offset" value="570" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="570" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logging" />
                                      <option name="possibleAnswer" value="logger" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace with a call using the logger instance." />
                                        </list>
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="7" />
                                          <option name="offset" value="707" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="707" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logging" />
                                      <option name="possibleAnswer" value="logger" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace with a call using the logger instance." />
                                        </list>
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="7" />
                                          <option name="offset" value="761" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="761" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logging" />
                                      <option name="possibleAnswer" value="logger" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="loggers.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logging.debug('Fetching current interest rate for %d years' % years)&#10;    rate = 5.3   # Stub external service call&#10;    logging.debug('Service returned interest rate %f' % rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logging.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logging.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logging.debug('Number of monthly payments %d' % payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logging.debug('Calculated result is %f' % result)&#10;    logging.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;    payment = get_monthly_payment(100000, 30)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;Logger names can form a named hierarchy. This allows you to selectively enable log messages at&#10;any point in this hierarchy. You can create a new branch in the namespace by separating the logger instance name with periods.&#10;&lt;br&gt;&#10;&lt;pre&gt;Example hierarchy with the corresponding getLogger() call:&#10;&#10;ROOT                                        logging.getLogger()&#10;   |&#10;   +-- &quot;a&quot;                                  logging.getLogger(&quot;a&quot;)&#10;   |    |&#10;   |    +-- &quot;a1&quot;                            logging.getLogger(&quot;a.a1&quot;)&#10;   |    |    |&#10;   |    |    +-- &quot;aaa&quot;                      logging.getLogger(&quot;a.a1.aaa&quot;)&#10;   |    |    |&#10;   |    |    +-- &quot;bbb&quot;                      logging.getLogger(&quot;a.a1.bbb&quot;)&#10;   |    |&#10;   |    +--- &quot;b1&quot;                           logging.getLogger(&quot;a.b1&quot;)&#10;   |&#10;   +-- &quot;b&quot;                                  logging.getLogger(&quot;b&quot;)&#10;&#10;&lt;/pre&gt;&#10;&lt;br&gt;&#10;In this task, create and use a &quot;mortgage.rate&quot; logger instance inside the &quot;get_current_rate()&quot; function.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;After you execute the task, you should notice this logger name is included with the log message.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Multiple Loggers" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202528" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0].replace('&quot;', &quot;'&quot;)&#10;    if placeholder == &quot;logger = logging.getLogger('mortgage.rate')&quot;:&#10;        passed()&#10;    else:&#10;        failed('Sorry, that is not correct. Check the Hint for more help.')&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857688000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="multiple_loggers.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Look at the module level &quot;logger&quot; instance as an example, but shadow the logger variable with a new Logger instance with the name 'mortgage.rate'.&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="28" />
                                          <option name="offset" value="139" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="28" />
                                      <option name="offset" value="139" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="create_a_new_logger_instance" />
                                      <option name="possibleAnswer" value="logger = logging.getLogger('mortgage.rate')" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="multiple_loggers.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    create_a_new_logger_instance&#10;&#10;    logger.debug('Fetching current interest rate for %d years' % years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f' % rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logger.debug('Number of monthly payments %d' % payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logger.debug('Calculated result is %f' % result)&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;    payment = get_monthly_payment(100000, 30)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In our previous examples, we logged messages with different severity levels using helper functions such as logger.debug()&#10;or logger.warning(). This is the easiest way to log messages.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;If you need to dynamically change the log level (for example, escalate a warning to an error), then you can use&#10;the Logger &quot;log()&quot; method which takes the level as the first argument.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, replace the helper logging functions with the equivalent calls using Logger &quot;log()&quot;.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="log method" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202529" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    answers = [&#10;        ['logger.log(logging.DEBUG,'],&#10;        ['logger.log(logging.DEBUG,'],&#10;        ['logger.log(logging.INFO,'],&#10;        ['logger.log(logging.WARN,', 'logger.log(logging.WARNING,'],&#10;        ['logger.log(logging.DEBUG,'],&#10;        ['logger.log(logging.DEBUG,'],&#10;        ['logger.log(logging.DEBUG,']&#10;    ]&#10;&#10;    check_answers(get_answer_placeholders(), answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857688000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="log_method.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logger.log(logging.DEBUG,&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="13" />
                                          <option name="offset" value="139" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="13" />
                                      <option name="offset" value="139" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logger.debug(" />
                                      <option name="possibleAnswer" value="logger.log(logging.DEBUG," />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logger.log(logging.DEBUG,&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="13" />
                                          <option name="offset" value="257" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="13" />
                                      <option name="offset" value="257" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logger.debug(" />
                                      <option name="possibleAnswer" value="logger.log(logging.DEBUG," />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logger.log(logging.INFO,&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="12" />
                                          <option name="offset" value="378" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="12" />
                                      <option name="offset" value="378" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logger.info(" />
                                      <option name="possibleAnswer" value="logger.log(logging.INFO," />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logger.log(logging.WARNING,&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="12" />
                                          <option name="offset" value="449" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="12" />
                                      <option name="offset" value="449" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logger.warn(" />
                                      <option name="possibleAnswer" value="logger.log(logging.WARNING," />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logger.log(logging.DEBUG,&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="13" />
                                          <option name="offset" value="566" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="13" />
                                      <option name="offset" value="566" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logger.debug(" />
                                      <option name="possibleAnswer" value="logger.log(logging.DEBUG," />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logger.log(logging.DEBUG,&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="13" />
                                          <option name="offset" value="702" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="13" />
                                      <option name="offset" value="702" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logger.debug(" />
                                      <option name="possibleAnswer" value="logger.log(logging.DEBUG," />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logger.log(logging.DEBUG,&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="13" />
                                          <option name="offset" value="755" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="13" />
                                      <option name="offset" value="755" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logger.debug(" />
                                      <option name="possibleAnswer" value="logger.log(logging.DEBUG," />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="log_method.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years' % years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f' % rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info(&quot;Calling mortgage calculator&quot;)&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logger.debug('Number of monthly payments %d' % payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logger.debug(&quot;Calculated result is %f&quot; % result)&#10;    logger.debug(&quot;Leaving mortgage calculator&quot;)&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;    payment = get_monthly_payment(100000, 30)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;We mentioned in a previous task, there are 5 severity levels : CRITICAL, ERROR, INFO, WARNING, DEBUG.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;There are a few exceptions.  First, a few of the levels have several constants defined.&#10;&#10;FATAL can be used instead of CRITICAL.  There is also a fatal() helper method for this level. Both CRITICAL and&#10;FATAL share the same numeric log level of 50. They can be used interchangeably.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;WARN can also be used as a shortcut for WARNING. They mean the same thing.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;NOTSET is a special constant that represents the lowest possible log severity level. It has a value of 0. You should&#10;not log messages with this severity level. It is used when configuring loggers in the logging hierarchy.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, replace the logging level passed to basicConfig() with NOTSET.  You will notice the output is&#10;similar to DEBUG, since NOTSET is a lower level (0) it includes every level.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Special log levels" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202530" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;logging.NOTSET&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857688000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="special_levels.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Use logging.NOTSET which is the lowest possible severity level.&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="13" />
                                          <option name="offset" value="875" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="13" />
                                      <option name="offset" value="875" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logging.DEBUG" />
                                      <option name="possibleAnswer" value="logging.NOTSET" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="special_levels.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years' % years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f' % rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logger.debug('Number of monthly payments %d' % payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logger.debug('Calculated result is %f' % result)&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;    payment = get_monthly_payment(100000, 30)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;When you can organize logging into a hierarchy, you can easily change the logging level at&#10;any point in this structure. This is a powerful way as narrowing your output to certain modules or subsystems.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You can change the level in this structure by obtaining the logger instance at that level and calling the&#10;&quot;setLevel&quot; method with the desired log level.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, obtain a reference to the &quot;mortgage.rate&quot; logger instance and set its level to DEBUG. When&#10;we run this program, we will see all messages DEBUG level or higher for this logger.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="Selective logging" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202531" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0].replace('&quot;', &quot;'&quot;)&#10;    if placeholder == &quot;'mortgage.rate'&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857688000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="selective_logging.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="The logger name is &quot;mortgage.rate&quot;&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="22" />
                                          <option name="offset" value="977" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="22" />
                                      <option name="offset" value="977" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="specify name of logger" />
                                      <option name="possibleAnswer" value="'mortgage.rate'" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="a level of logging.DEBUG will show all messages DEBUG level or higher" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="35" />
                                          <option name="offset" value="1026" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="35" />
                                      <option name="offset" value="1026" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="specify this loggers severity level" />
                                      <option name="possibleAnswer" value="logging.DEBUG" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="selective_logging.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger = logging.getLogger('mortgage.rate')&#10;&#10;    logger.debug('Fetching current interest rate for %d years' % years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f' % rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logger.debug('Number of monthly payments %d' % payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logger.debug('Calculated result is %f' % result)&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.WARNING)&#10;    rate_logger = logging.getLogger(specify name of logger)&#10;    rate_logger.setLevel(specify this loggers severity level)&#10;    payment = get_monthly_payment(100000, 30)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="28797" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="50396" />
                <option name="index" value="2" />
                <option name="name" value="Formatting" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1513857718000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;You can customize how each log message is output by specifying a format string.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;This can be done by passing a &quot;format&quot; keyword argument to the &quot;basicConfig&quot; function.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The following format string will output the human readable datetime, the severity level and the log message.&#10;&lt;br&gt;&#10;'%(asctime)s %(levelname)s %(message)s'&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, pass this format string to the &quot;basicConfig&quot; function.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Custom format string" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202532" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0].replace('&quot;', &quot;'&quot;)&#10;    if placeholder == &quot;'%(asctime)s %(levelname)s %(message)s'&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857717000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="custom_format_string.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="'%(asctime)s %(levelname)s %(message)s'" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="27" />
                                          <option name="offset" value="928" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="27" />
                                      <option name="offset" value="928" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="insert custom format string" />
                                      <option name="possibleAnswer" value="'%(asctime)s %(levelname)s %(message)s'" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="custom_format_string.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logging.debug('Fetching current interest rate for %d years' % years)&#10;    rate = 5.3   # Stub external service call&#10;    logging.debug('Service returned interest rate %f' % rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logging.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logging.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logging.debug('Number of monthly payments %d' % payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logging.debug('Calculated result is %f' % result)&#10;    logging.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG,&#10;                        format=insert custom format string)&#10;    payment = get_monthly_payment(100000, 80)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In the previous task, we used the &quot;%(asctime)s&quot; format specifier to print a human readable datetime string.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;We can further customize the date/time output with the &quot;datefmt&quot; keyword argument in&#10;the call to &quot;basicConfig()&quot;.  The value is a &quot;strftime&quot; compatible format string.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, pass a &quot;datefmt&quot; string value that would print a date time looking like &quot;Sun Feb 22 2015 09:33:25PM&quot;.&#10;&lt;br&gt;&#10;Here's an example of some of the strftime() codes that can be used to create such a format string.&#10;&lt;br&gt;&#10;&lt;pre&gt;Code | Description                                     | Example&#10;=====+=================================================+==========&#10;%A   | Weekday as locales full name                    | Wednesday&#10;%a   | Weekday as locales abbreviated name             | Wed&#10;%b   | Month as locales abbreviated name               | Jan&#10;%d   | Day of the month                                | 02&#10;%Y   | Year with century as a decimal number           | 2014&#10;%I   | Hour (12-hour clock)                            | 05&#10;%M   | Minute as a zero-padded decimal number          | 15&#10;%S   | Second as a zero-padded decimal number          | 30&#10;%p   | Locales equivalent of either AM or PM           | PM&#10;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Custom datetime format" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202533" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;%a %b %d %Y %I:%M:%S%p&quot;:&#10;        passed()&#10;    else:&#10;        failed('Sorry, that is not correct. Check the Hint for the correct answer.')&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857717000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="custom_datetime.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Use the string '%a %b %d %Y %I:%M:%S%p'&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="31" />
                                          <option name="offset" value="1002" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="31" />
                                      <option name="offset" value="1002" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="insert format string codes here" />
                                      <option name="possibleAnswer" value="%a %b %d %Y %I:%M:%S%p" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="custom_datetime.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logging.debug('Fetching current interest rate for %d years' % years)&#10;    rate = 5.3   # Stub external service call&#10;    logging.debug('Service returned interest rate %f' % rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logging.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logging.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logging.debug('Number of monthly payments %d' % payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logging.debug('Calculated result is %f' % result)&#10;    logging.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG,&#10;                        format='%(asctime)s %(levelname)s %(message)s',&#10;                        datefmt='insert format string codes here')&#10;    payment = get_monthly_payment(100000, 80)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;A LogRecord object is created when you call one of the logging functions, such as logging.debug(). This object&#10;contains attributes that can be included in the format string. Here are the most useful ones:&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;pre&gt;Attribute   | Format string   | Description&#10;============+=================+=================================&#10;asctime     | %(asctime)s     | Human-readable date/time&#10;levelname   | %(levelname)s   | Logging level string&#10;filename    | %(filename)s    | Filename of current module&#10;funcName    | %(funcName)s    | Name of current function&#10;lineno      | %(lineno)d      | Line number of logging call&#10;module      | %(module)s      | Module name (without .py)&#10;message     | %(message)s     | Log Message&#10;name        | %(name)s        | Logger instance name&#10;process     | %(process)d     | Process ID&#10;processName | %(processName)s | Process Name&#10;thread      | %(thread)d      | Thread ID&#10;threadName  | %(threadName)s  | Thread Name&#10;&lt;/pre&gt;&#10;&lt;br&gt;&#10;Modify the format string to log: Human-readable date/time, level string, module name, current function and message.&#10;&lt;br&gt;&#10;Log these in that order with spaces separating each attribute.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="LogRecord attributes" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202534" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;%(asctime)s %(levelname)s %(module)s %(funcName)s %(message)s&quot;:&#10;        passed()&#10;    else:&#10;        failed('Sorry, that is not correct. Check the Hint for the correct answer.')&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857717000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="log_attributes.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="%(asctime)s %(levelname)s %(module)s %(funcName)s %(message)s&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="25" />
                                          <option name="offset" value="929" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="25" />
                                      <option name="offset" value="929" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="insert_format_string_here" />
                                      <option name="possibleAnswer" value="%(asctime)s %(levelname)s %(module)s %(funcName)s %(message)s" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="log_attributes.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logging.debug('Fetching current interest rate for %d years' % years)&#10;    rate = 5.3   # Stub external service call&#10;    logging.debug('Service returned interest rate %f' % rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logging.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logging.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logging.debug('Number of monthly payments %d' % payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logging.debug('Calculated result is %f' % result)&#10;    logging.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG,&#10;                        format='insert_format_string_here')&#10;    payment = get_monthly_payment(100000, 80)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;When an exception occurs, it's useful to include the entire traceback in your log file for diagnosing problems.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You can use the &quot;exception()&quot; function on the Logger instance to gather the traceback information and do the&#10;formatting for you. It's similar to the &quot;debug()&quot; function, except you should only call &quot;exception()&quot; from an&#10;exception handler.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The following code generates an exception. Replace the call to &quot;pass&quot; with a call to log the exception instead. This&#10;will also allow the exception to propagate up to the caller. This is usually better in this case, instead of silently&#10;catching any exception.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Exceptions" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202535" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0].replace('&quot;', &quot;'&quot;)&#10;    if placeholder.startswith(&quot;logger.exception(&quot;) and placeholder.find(&quot;'&quot;) != -1:&#10;        passed()&#10;    else:&#10;        failed(&quot;That is not correct. Be sure to call exception() with a string argument.&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857717000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="log_exception.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace with call to logger.exception(). Don't forget to pass a message string.&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="4" />
                                          <option name="offset" value="825" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="825" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="pass" />
                                      <option name="possibleAnswer" value="logger.exception('Exception occured')" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="log_exception.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years' % years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f' % rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;    result = None&#10;    try:&#10;        if years &gt; 50:&#10;            logger.warn('Term greater than 50 years')&#10;&#10;        mon_rate = get_current_rate(years)/1200&#10;        payments = years * 12&#10;        logger.debug('Number of monthly payments %d' % payments)&#10;        result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;        logger.debug('Calculated result is %f' % result)&#10;    except:&#10;        pass&#10;    logging.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;    payment = get_monthly_payment(100000, 0)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;When you include an object in your log message, the object's __str__ method is called to return a string value for that object.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;If you run this task, you will notice the log message contains the __str__ generated string.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;If you want to use the __repr__ generated string, you will have to explicitly call repr() on your object.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, log the __repr__ generated string.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Logging objects" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202536" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;repr(obj)&quot; or placeholder == &quot;obj.__repr__()&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857718000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="log_objects.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="the repr() function is used to call the __repr__ method of your class. Pass the object instance to repr()" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="3" />
                                          <option name="offset" value="646" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="3" />
                                      <option name="offset" value="646" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="obj" />
                                      <option name="possibleAnswer" value="repr(obj)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="log_objects.py" />
                                <option name="text" value="# This example shows logging objects&#10;#&#10;&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;class Mortgage(object):&#10;    def __init__(self, principal, rate, term):&#10;        self.principal = principal&#10;        self.rate = rate&#10;        self.term = term&#10;&#10;    def __str__(self):&#10;        return 'Mortgage principal %f for %f years at %f rate' % (&#10;            self.principal, self.term, self.rate)&#10;&#10;    def __repr__(self):&#10;        return 'Mortgage(%f, %f, %f)' % (self.principal, self.rate, self.term)&#10;&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;&#10;    obj = Mortgage(100000, 4.1, 15)&#10;    logger.debug('Created object: %s',obj)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;When logging you should be aware of the type and size of data you might be logging.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;If you have a value that could be very large, such as long string, you might want to limit the output, so you&#10;don't make it difficult to look at your log output.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;One simple way to do this with string values is to use the format specification &quot;.NNs&quot;, where NN is the number of&#10;characters to limit the string output. See the task for an example of this.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In some cases, you might want to truncate an object, but indicate that the object was truncated. The common&#10;convention is to append the ellipses &quot;...&quot; to the end of the string to indicate there was more data. The following&#10;example shows how you could create a helper function that uses string slicing to do this.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, wrap the &quot;big_list&quot; object in a call to our &quot;truncate()&quot; helper function.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Limiting output" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202537" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder.startswith(&quot;truncate(big_list,&quot;):&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857718000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="limit_output.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Call truncate(), for example: truncate(big_list, 30)" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="8" />
                                          <option name="offset" value="748" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="748" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="big_list" />
                                      <option name="possibleAnswer" value="truncate(big_list, 30)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="limit_output.py" />
                                <option name="text" value="import logging&#10;&#10;def truncate(obj, nlen):&#10;    &quot;&quot;&quot; Convert 'obj' to string and truncate if greater than length&quot;&quot;&quot;&#10;    str_value = str(obj)&#10;    if len(str_value) &gt; nlen:&#10;        return str_value[:nlen-3] + '...'&#10;    return str_value&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;&#10;    long_string = 'A' * 2000&#10;    logging.debug('something happened with value=%s', long_string)&#10;&#10;    # Truncate result (no ellipses)&#10;    logging.debug('something happened with value=%.10s', long_string)&#10;&#10;    # Create a large list&#10;    big_list = [1] * 2000&#10;&#10;    # Log the full list&#10;    logging.debug('something happened with the list=%s', big_list)&#10;&#10;    # Truncate result (with ellipses)&#10;    logging.debug('something happened with the list=%s', big_list)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;As a Python developer, you are probably familiar with string formatting (or interpolation) using the &quot;%&quot; operator. For example:&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&quot;Hello, %s&quot; % (&quot;John&quot;, )&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;will return the string result:&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&quot;Hello, John&quot;&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You may have noticed in some of our logging statements, we pass the string values separately, instead of using this style.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;This has the advantage that no time is spent formatting a string if the log message is going to be filtered out&#10;by the current severity level.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Update this second logging call to pass the string value as an argument.&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="String formatting" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202538" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        [', &quot;value&quot;', ',&quot;value&quot;', &quot;,'value'&quot;, &quot;, 'value'&quot;]&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857718000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="string_formatting.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="See previous logging statement for the answer.&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="14" />
                                          <option name="offset" value="297" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="14" />
                                      <option name="offset" value="297" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value=" % ('value', )" />
                                      <option name="possibleAnswer" value=", 'value'" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="string_formatting.py" />
                                <option name="text" value="from __future__ import print_function&#10;import logging&#10;&#10;logger = logging.getLogger(__name__)&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.WARNING)&#10;&#10;    logging.debug('this message is not formatted; value=%s', 'value')&#10;&#10;    logging.debug('this message is not formatted; value=%s' % ('value', ))&#10;&#10;&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="28798" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="50397" />
                <option name="index" value="3" />
                <option name="name" value="Basic Handlers" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1513857750000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;Up to this point we have been outputting our logging information to stderr (console) output. This is useful for&#10;small programs, but as the amount of log output increases, it is useful to log the output to a file, so that you&#10;can go back and search the output for specific information.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The logging module allows us to setup Handler objects to write the output to different destinations. The FileHandler&#10;is a built-in Handler object that writes log output to a file.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task we can use the &quot;basicConfig()&quot; function to setup a FileHandler for us automatically. This is done by&#10;passing the &quot;filename&quot; keyword argument. Use the value of log_filename. The FileHandler created&#10;is automatically added to the root logger.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;After you successfully run this program, you should see a &quot;basic_file.log&quot; appear under the &quot;Sandbox&quot; folder&#10;in the Project view.  The Sandbox should appear at the end of your project tree. You can double-click this&#10;file to see the contents. If the file does not appear, you can try collapsing and expanding the Sandbox folder.&#10;You should also note that nothing was logged&#10;to the console, because we replaced the default &quot;stderr&quot; stream handler with a FileHandler.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;If you run this task several times, you will notice the log messages are appended to the existing file every&#10;time we run the program. This is because the default file mode is to append to the log file.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Basic file handler" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202539" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0].replace('&quot;', &quot;'&quot;)&#10;    if placeholder == &quot;filename=log_filename&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857745000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="basic_file_handler.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="filename=log_filename&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="23" />
                                          <option name="offset" value="1032" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="23" />
                                      <option name="offset" value="1032" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="setup_file_handler_here" />
                                      <option name="possibleAnswer" value="filename=log_filename" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="basic_file_handler.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logger.debug('Number of monthly payments %d', payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logger.debug('Calculated result is %f', result)&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    log_filename = '../../Sandbox/basic_file.log'&#10;    logging.basicConfig(level=logging.DEBUG,&#10;                        format='%(asctime)s %(levelname)s %(message)s',&#10;                        setup_file_handler_here)&#10;    payment = get_monthly_payment(100000, 80)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;If you ran the previous task a few times, you will have noticed each time all the log messages were appended to the file.&#10;Sometimes, it is useful to truncate the log file each time you start the program to avoid having to sort through&#10;a large number of old log messages.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You can do this by passing a &quot;filemode&quot; keyword argument to &quot;basicConfig()&quot; with a string value of &quot;w&quot;.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, please change the default log file mode to start a new file each time the program is run.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Basic truncate log file" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202540" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;w&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857745000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="new_log_files.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="This is similar to the open() function. &quot;w&quot; can be used to create a new file, overwriting any existing file." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="27" />
                                          <option name="offset" value="1057" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="27" />
                                      <option name="offset" value="1057" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="insert create new file mode" />
                                      <option name="possibleAnswer" value="w" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="new_log_files.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logger.debug('Number of monthly payments %d', payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logger.debug('Calculated result is %f', result)&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG,&#10;                        format='%(asctime)s %(levelname)s %(message)s',&#10;                        filename='../../Sandbox/basic_file.log',&#10;                        filemode='insert create new file mode')&#10;&#10;    payment = get_monthly_payment(100000, 80)&#10;    print('Monthly payment is %f' % payment)&#10;&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;Up to this point we have been relying on the &quot;basicConfig()&quot; function to help configure logging. You can also&#10;configure the logging objects yourself for more flexibility.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, we are going to create a FileHandler object ourselves and add this to the root logger.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;1) Update the task to create a new FileHandler object. The first argument is the filename. Use &quot;log_filename&quot; for this task.&#10;&lt;br&gt;&#10;2) Next, we have to call addHandler() on the Logger object. In this task we are adding the handler to the&#10;root logger, so any child loggers will also be output to our handler.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Note: To see the file &quot;create_file_handler.log&quot; in your Sandbox, you may have to collapse/expand the &quot;Sandbox&quot; folder in your Project view to&#10;see the new file created.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Create file handler" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202541" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        ['logging.FileHandler(log_filename)', 'logging.FileHandler(filename=log_filename)'],&#10;        ['addHandler']&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857745000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="file_handler.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logging.FileHandler(log_filename)" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="25" />
                                          <option name="offset" value="1108" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="25" />
                                      <option name="offset" value="1108" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="create FileHandler object" />
                                      <option name="possibleAnswer" value="logging.FileHandler(log_filename)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="addHandler() takes a handler and adds it to the list of handlers for a Logger." />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="21" />
                                          <option name="offset" value="1189" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="21" />
                                      <option name="offset" value="1189" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="add handler to logger" />
                                      <option name="possibleAnswer" value="addHandler" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="file_handler.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logger.debug('Number of monthly payments %d', payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logger.debug('Calculated result is %f', result)&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    # logging.basicConfig(level=logging.DEBUG,&#10;    #                     format='%(asctime)s %(levelname)s %(message)s',&#10;    #                     filename='../../Sandbox/basic_file.log')&#10;&#10;    log_filename = '../../Sandbox/create_file_handler.log'&#10;    file_handler = create FileHandler object&#10;&#10;    root_logger = logging.getLogger()&#10;    root_logger.add handler to logger(file_handler)&#10;    root_logger.setLevel(logging.DEBUG)&#10;&#10;    payment = get_monthly_payment(100000, 80)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In the previous task, you may have noticed the only thing output in our log file was the log message.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;This is because we have no Formatter object set on our handler. In previous examples, we have relied&#10;on &quot;basicConfig()&quot; to build a formatter for us.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The Formatter is responsible for taking a LogRecord object and creating a string result that can be used&#10;by the Handler to output a log message. Each Handler has one Formatter.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task we need to construct a &quot;Formatter&quot; object, passing it our format string. Then we need&#10;to call &quot;setHandler&quot; on our new file handler instance.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Note: To see the file &quot;file_handler_with_formatter.log&quot; in your Sandbox, you may have to collapse/expand the &quot;Sandbox&quot; folder in your Project view to&#10;see the new file created.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Set formatter" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202542" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        ['%(asctime)s %(levelname)s %(message)s'],&#10;        ['setFormatter(fmt)']&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857745000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="set_formatter.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="%(asctime)s %(levelname)s %(message)s" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="57" />
                                          <option name="offset" value="1180" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="57" />
                                      <option name="offset" value="1180" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter same format string as used in basicConfig() example" />
                                      <option name="possibleAnswer" value="%(asctime)s %(levelname)s %(message)s" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="setFormatter(fmt) sets or replaces the existing formatter attached to the FileHandler object." />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="43" />
                                          <option name="offset" value="1257" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="43" />
                                      <option name="offset" value="1257" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="set the formatter on the FileHandler object" />
                                      <option name="possibleAnswer" value="setFormatter(fmt)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="set_formatter.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logger.debug('Number of monthly payments %d', payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logger.debug('Calculated result is %f', result)&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    # logging.basicConfig(level=logging.DEBUG,&#10;    #                     format='%(asctime)s %(levelname)s %(message)s',&#10;    #                     filename='../../Sandbox/basic_file.log')&#10;&#10;    log_filename = '../../Sandbox/file_handler_with_formatter.log'&#10;    file_handler = logging.FileHandler(log_filename)&#10;&#10;    fmt = logging.Formatter('enter same format string as used in basicConfig() example')&#10;    file_handler.set the formatter on the FileHandler object&#10;&#10;    root_logger = logging.getLogger()&#10;    root_logger.addHandler(file_handler)&#10;    root_logger.setLevel(logging.DEBUG)&#10;&#10;    payment = get_monthly_payment(100000, 80)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;We have replaced the console (stderr) handler with the file handler. Sometimes, it's useful to log to both&#10;places at the same time.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You can call &quot;addHandler()&quot; on a Logger multiple times. All of the Handler objects will receive the log messages.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, we have created a new StreamHandler instance. Instead of using &quot;stderr&quot; stream, you should&#10;pass &quot;sys.stdout&quot; to see how you could use another output stream.  Then pass this StreamHandler instance to&#10;&quot;addHandler()&quot;.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You should also not forget to add the Formatter to the StreamHandler object. In this task, re-use the same Formatter&#10;you used with the FileHandler. You should also note you can specify different formatters for each handler.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Multiple handlers" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202543" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        ['logging.StreamHandler'],&#10;        ['stdout_handler.setFormatter(fmt)'],&#10;        ['stdout_handler']&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857745000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="multiple_handlers.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logging.StreamHandler" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="32" />
                                          <option name="offset" value="1171" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="32" />
                                      <option name="offset" value="1171" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="specify the stream handler class" />
                                      <option name="possibleAnswer" value="logging.StreamHandler" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="stdout_handler.setFormatter(fmt)" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="50" />
                                          <option name="offset" value="1220" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="50" />
                                      <option name="offset" value="1220" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="use the existing formatter with the stdout_handler" />
                                      <option name="possibleAnswer" value="stdout_handler.setFormatter(fmt)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="stdout_handler" />
                                        </list>
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="23" />
                                          <option name="offset" value="1298" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="23" />
                                      <option name="offset" value="1298" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="pass the handler object" />
                                      <option name="possibleAnswer" value="stdout_handler" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="multiple_handlers.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import sys&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logger.debug('Number of monthly payments %d', payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logger.debug('Calculated result is %f', result)&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    log_filename = '../../Sandbox/create_file_handler.log'&#10;    file_handler = logging.FileHandler(log_filename)&#10;&#10;    fmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')&#10;    file_handler.setFormatter(fmt)&#10;&#10;    root_logger = logging.getLogger()&#10;    root_logger.addHandler(file_handler)&#10;&#10;    stdout_handler = specify the stream handler class(sys.stdout)&#10;    use the existing formatter with the stdout_handler&#10;    root_logger.addHandler(pass the handler object)&#10;&#10;    root_logger.setLevel(logging.DEBUG)&#10;&#10;    payment = get_monthly_payment(100000, 80)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In some use cases you may want to log different severity levels to different handlers.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You can do this by calling the &quot;setLevel()&quot; function on the Handler object. Only log messages with this&#10;level or greater will be written to the output stream.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, change the StreamHandler logging level to only output WARNING messages or higher.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;After running this task, you should notice if you load  the &quot;separate_levels.log&quot; file, it contains all the&#10;log messages, and the console only showed the one WARN level message.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Separate handler log levels" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202544" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        ['setLevel(logging.WARNING)', 'setLevel(logging.WARN)']&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857745000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="separate_levels.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="setLevel(logging.WARNING)" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="17" />
                                          <option name="offset" value="1264" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="17" />
                                      <option name="offset" value="1264" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="set handler level" />
                                      <option name="possibleAnswer" value="setLevel(logging.WARNING)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="separate_levels.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import sys&#10;import logging&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logging.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logging.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logging.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logging.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logging.debug('Number of monthly payments %d', payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logging.debug('Calculated result is %f', result)&#10;    logging.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    log_filename = '../../Sandbox/separate_levels.log'&#10;    file_handler = logging.FileHandler(log_filename)&#10;&#10;    fmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')&#10;    file_handler.setFormatter(fmt)&#10;&#10;    root_logger = logging.getLogger()&#10;    root_logger.addHandler(file_handler)&#10;&#10;    stdout_handler = logging.StreamHandler(sys.stdout)&#10;    stdout_handler.setFormatter(fmt)&#10;    stdout_handler.set handler level&#10;    root_logger.addHandler(stdout_handler)&#10;&#10;    root_logger.setLevel(logging.DEBUG)&#10;&#10;    payment = get_monthly_payment(100000, 80)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="28799" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="50398" />
                <option name="index" value="4" />
                <option name="name" value="Advanced Handlers" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1513857778000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;When you are logging a lot of data to a file, it can be difficult to use your log files if they become too large.&#10;The standard library offers a few special file handler implementations that can manage this problem for you.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The RotatingFileHandler supports a maximum file length parameter. If a new log message is going to exceed that maximum&#10;length, the file is closed and a new file is created. This ensures your files are all a manageable size. The file length&#10;is specified in the maxBytes argument passed to the RotatingFileHandler constructor.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Before the RotatingFileHandler starts a new file, it will rename the old log files with a number appended to each name.&#10;For example &quot;.1&quot;, &quot;.2&quot;.  The most recent log data is always written to the log file without this extension. The second&#10;most recent data has the &quot;.1&quot; extension, and so forth.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The RotatingFileHandler does one last thing, it keeps only the specific number of files.  This is done in the&#10;backupCount argument. The oldest log files are removed. This allows us to keep a fixed limit on the space and&#10;number of files used by our logging. This is important&#10;for running systems over a long period of time.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;1) Complete the import statement for the &quot;logging.handlers&quot; module.&#10;&lt;br&gt;&#10;2) Create a new instance of the RotatingFileHandler object&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;After you run this task, you should see the files: &quot;rotating.log&quot;, &quot;rotating.log.1&quot;, and &quot;rotating.log.2&quot; under&#10;your Sandbox folder. The sandbox is located in your Project tree, near the bottom. If you do not see the files,&#10;try collapsing and expanding the Sandbox folder.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Note: When you look at these log files, you will only see the most recent log messages.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Rotating files" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202545" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        ['logging.handlers'],&#10;        ['logging.handlers.RotatingFileHandler']&#10;&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857772000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="rotating_log_files.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logging.handlers" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="52" />
                                          <option name="offset" value="72" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="52" />
                                      <option name="offset" value="72" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="specify the module that contains RotatingFileHandler" />
                                      <option name="possibleAnswer" value="logging.handlers" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logging.handlers.RotatingFileHandler" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="45" />
                                          <option name="offset" value="1006" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="45" />
                                      <option name="offset" value="1006" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="fully qualified name of rotating file handler" />
                                      <option name="possibleAnswer" value="logging.handlers.RotatingFileHandler" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="rotating_log_files.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;import specify the module that contains RotatingFileHandler&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logger.debug('Number of monthly payments %d', payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logger.debug('Calculated result is %f', result)&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    log_filename = '../../Sandbox/rotating.log'&#10;    max_files=2&#10;    max_file_size=100&#10;    file_handler = fully qualified name of rotating file handler(log_filename,&#10;                                                        mode='a',&#10;                                                        maxBytes=max_file_size,&#10;                                                        backupCount=max_files)&#10;&#10;    fmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')&#10;    file_handler.setFormatter(fmt)&#10;&#10;    root_logger = logging.getLogger()&#10;    root_logger.addHandler(file_handler)&#10;    root_logger.setLevel(logging.DEBUG)&#10;&#10;    payment = get_monthly_payment(100000, 80)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In the previous task, we started new log files based on the file size. In some cases, it's useful to start a new&#10;log file after a specified time interval. When you are given a problem to diagnose at a specific time, it is easier&#10;to determine which log file contains the log information based on the filename.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;TimedRotatingFileHandler is similar to RotatingFileHandler() except you specify two interval parameters. The first&#10;argument &quot;when&quot; specifies the type of interval. Here are possible values (case insensitive):&#10;&lt;br&gt;&#10;&lt;pre&gt;VALUE          TYPE OF INTERVAL&#10;=============+======================'&#10;'S'          | Seconds&#10;'M'          | Minutes&#10;'H'          | Hours&#10;'D'          | Days&#10;'W0'-'W6'    | Weekday (0=Monday)&#10;'midnight'   | Roll over at midnight&#10;&lt;/pre&gt;&#10;The second argument is &quot;interval&quot; which is going to depend on the type of interval. Using a &quot;when&quot; value of &quot;H&quot; and&#10;an &quot;interval&quot; of &quot;1&quot; is going to roll over the log file every one hour.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, we have created a special filter that causes a delay between log records. This is to help demonstrate&#10;the rolling over behavior using time.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Update the arguments to TimedRotatingFileHandler to rotate the log file every two seconds.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;After you execute this task, wait about 20 seconds, then look at the Sandbox folder for the &quot;timed_rotation.log&quot; files. You should note how&#10;the filename also has a date/time appended to it.&#10;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Rotating files by time" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202546" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0].replace('&quot;', &quot;'&quot;)&#10;    if placeholder == &quot;'S'&quot; or placeholder == &quot;'s'&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;    placeholder = placeholders[1]&#10;    if placeholder == &quot;2&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857772000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="timed_rotation.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="For seconds you should specify 'S'" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="16" />
                                          <option name="offset" value="1352" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="16" />
                                      <option name="offset" value="1352" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="type of interval" />
                                      <option name="possibleAnswer" value="'S'" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="For this task, use 2" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="21" />
                                          <option name="offset" value="1440" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="21" />
                                      <option name="offset" value="1440" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="frequency of rollover" />
                                      <option name="possibleAnswer" value="2" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="timed_rotation.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import time&#10;import logging&#10;import logging.handlers&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;&#10;class DelayFilterer(logging.Filter):&#10;    &quot;&quot;&quot; Logging filter which inserts a delay between each log record &quot;&quot;&quot;&#10;    def __init__(self, delay_secs=1):&#10;        self.delay_secs = delay_secs&#10;    def filter(self, record):&#10;        time.sleep(self.delay_secs)&#10;        return True&#10;&#10;def get_current_rate(years):&#10;    logging.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logging.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logging.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logging.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logging.debug('Number of monthly payments %d', payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logging.debug('Calculated result is %f', result)&#10;    logging.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    log_filename = '../../Sandbox/timed_rotation.log'&#10;    file_handler = logging.handlers.TimedRotatingFileHandler(log_filename,&#10;                                                             when=type of interval,&#10;                                                             interval=frequency of rollover,&#10;                                                             backupCount=4)&#10;&#10;    fmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')&#10;    file_handler.setFormatter(fmt)&#10;&#10;    root_logger = logging.getLogger()&#10;    root_logger.addHandler(file_handler)&#10;    root_logger.setLevel(logging.DEBUG)&#10;&#10;    # Custom filter to place a 1 second delay between each log message&#10;    root_logger.addFilter(DelayFilterer(delay_secs=1))&#10;&#10;    payment = get_monthly_payment(100000, 80)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;The MemoryHandler is a special handler that provides buffering of log messages until it the specified capacity&#10;or a specified severity level. At that time, the buffered log messages are sent to another Handler.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;If you wanted to limit disk activity from the logger to less frequent intervals, the MemoryHandler is useful.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;MemoryHandler is defined in the &quot;logging.handlers&quot; module. It takes a &quot;capacity&quot; argument which is the&#10;number of log records, and a target which is an instance of another file handle.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, configure the MemoryHandler to use the FileHandler object.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Memory handler" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202547" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;file_handler&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857772000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="memory_handler.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="The instance is in the 'file_handler' variable." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="26" />
                                          <option name="offset" value="1265" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="26" />
                                      <option name="offset" value="1265" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="use the FileHandler object" />
                                      <option name="possibleAnswer" value="file_handler" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="memory_handler.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;import logging.handlers&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    result = None&#10;    try:&#10;        mon_rate = get_current_rate(years)/1200&#10;        payments = years * 12&#10;        logger.debug('Number of monthly payments %d', payments)&#10;        result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;        logger.debug('Calculated result is %f', result)&#10;    except:&#10;        logger.exception('caught exception')&#10;&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;&#10;    log_filename = '../../Sandbox/memory_handler.log'&#10;    file_handler = logging.FileHandler(log_filename, mode='w')&#10;&#10;    fmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')&#10;    file_handler.setFormatter(fmt)&#10;&#10;    memory_handler = logging.handlers.MemoryHandler(capacity=2, target=use the FileHandler object)&#10;&#10;    root_logger = logging.getLogger()&#10;    root_logger.addHandler(memory_handler)&#10;    root_logger.setLevel(logging.DEBUG)&#10;&#10;    payment = get_monthly_payment(100000, 0)&#10;    print('Monthly payment is %s' % payment)&#10;&#10;    # Remove file handler target to prevent logging.shutdown() from explicitly&#10;    # flushing all handlers, causing any recent DEBUG output to be written&#10;    # to the FileHandler.&#10;    memory_handler.setTarget(None)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;The standard library provides quite a few handlers. The following is a summary:&#10;&lt;br&gt;&#10;&lt;pre&gt;StreamHandler, FileHandler, NullHandler, RotatingFileHandler, TimedRotatingFileHandler, WatchedFileHandler,&#10;SocketHandler, DatagramHandler, SysLogHandler, SMTPHandler, NTEventLogHandler, HTTPHandler, BufferingHandler,&#10;and MemoryHandler.&#10;&lt;/pre&gt;&#10;&lt;br&gt;&#10;In this last advanced handler task, we are going to demonstrate the HTTPHandler. This can be used to send&#10;log messages to a HTTP server.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The Python standard library includes a built-in HTTP Server we are going to use in this task. If you are in&#10;Windows you need to open a command window that has Python in the path. If you are on a Unix-based system you need to open&#10;a local shell window.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Enter the following in the new window:&lt;br&gt;&#10;python -m SimpleHTTPServer 8080&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;This should see a message such as &quot;Serving HTTP on 0.0.0.0 port 8080&quot;.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;If you are already running a service on this port, you may need to make changes in this task.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Once you have done that, update the task to use the HTTPHandler and pass it the host value of &quot;127.0.0.1:8080&quot; and&#10;&quot;url&quot; value of &quot;/&quot;.  The default HTTP method &quot;GET&quot; will be used.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;After you have run this code, you should see results from the SimpleHTTPServer window. You can then terminate the&#10;HTTP server with Control-C.  If you were unable to get the HTTP server working, you can continue to the next task after&#10;you have made the changes. Just ignore the console warnings about not being able to connect.  This would demonstrate&#10;a potential production issue for your system if the HTTP server was not available, so use this handler with caution.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="HTTP handler" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202548" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        ['HTTPHandler'],&#10;        ['127.0.0.1:8080'],&#10;        ['/']&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857772000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="http_handler.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="HTTPHandler" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="20" />
                                          <option name="offset" value="1184" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="20" />
                                      <option name="offset" value="1184" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="name of http handler" />
                                      <option name="possibleAnswer" value="HTTPHandler" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="127.0.0.1:8080" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="19" />
                                          <option name="offset" value="1220" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="19" />
                                      <option name="offset" value="1220" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter host and port" />
                                      <option name="possibleAnswer" value="127.0.0.1:8080" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Use &quot;/&quot; for this simple example. Typically you would specify a URL endpoint that can process your log data." />
                                        </list>
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="13" />
                                          <option name="offset" value="1286" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="13" />
                                      <option name="offset" value="1286" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter the url" />
                                      <option name="possibleAnswer" value="/" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="http_handler.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;import logging.handlers&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    result = None&#10;    try:&#10;        mon_rate = get_current_rate(years)/1200&#10;        payments = years * 12&#10;        logger.debug('Number of monthly payments %d', payments)&#10;        result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;        logger.debug('Calculated result is %f', result)&#10;    except:&#10;        logger.exception('caught exception')&#10;&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;&#10;    file_handler = logging.FileHandler('memory_handler.log', mode='w')&#10;&#10;    fmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')&#10;    file_handler.setFormatter(fmt)&#10;&#10;    http_handler = logging.handlers.name of http handler(host='127.0.0.1enter host and port                                          url='enter the url',&#10;                                                method='GET')&#10;&#10;    root_logger = logging.getLogger()&#10;    root_logger.addHandler(http_handler)&#10;    root_logger.setLevel(logging.DEBUG)&#10;&#10;    payment = get_monthly_payment(100000, 30)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;One thing you should be aware of when working with more advanced handlers, is how the logging system gracefully&#10;closes and cleans up any resources it is using. For example, if a handler is buffering log messages such as&#10;the MemoryHandler, then how does the logging system ensure those messages are handled.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;This is done through the &quot;logging.shutdown()&quot; function. The logging module will automatically register this function&#10;to be called when the interpreter is shutting down. So, normally you shouldn't have to worry about it. However, there&#10;are some cases where you might want to explicitly shutdown your handlers. For example, if you are debugging your&#10;handlers &quot;close()&quot; method or the handler is using some resources that may be uninitialized by the time&#10;the close() method is called.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, insert the call to explicitly shutdown the logging system.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="shutdown" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202549" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;logging.shutdown()&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857772000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="logging_shutdown.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logging.shutdown() can be used to gracefully shutdown the logging system." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="49" />
                                          <option name="offset" value="1713" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="49" />
                                      <option name="offset" value="1713" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="insert call to gracefully shutdown logging system" />
                                      <option name="possibleAnswer" value="logging.shutdown()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="logging_shutdown.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;import logging.handlers&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    result = None&#10;    try:&#10;        mon_rate = get_current_rate(years)/1200&#10;        payments = years * 12&#10;        logger.debug('Number of monthly payments %d', payments)&#10;        result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;        logger.debug('Calculated result is %f', result)&#10;    except:&#10;        logger.exception('caught exception')&#10;&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;&#10;    log_filename = '../../Sandbox/memory_handler.log'&#10;    file_handler = logging.FileHandler(log_filename, mode='w')&#10;&#10;    fmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')&#10;    file_handler.setFormatter(fmt)&#10;&#10;    memory_handler = logging.handlers.MemoryHandler(capacity=2, target=file_handler)&#10;&#10;    root_logger = logging.getLogger()&#10;    root_logger.addHandler(memory_handler)&#10;    root_logger.setLevel(logging.DEBUG)&#10;&#10;    payment = get_monthly_payment(100000, 0)&#10;    print('Monthly payment is %s' % payment)&#10;&#10;    # Remove file handler target to prevent logging.shutdown() from explicitly&#10;    # flushing all handlers, causing any recent DEBUG output to be written&#10;    # to the FileHandler.&#10;    memory_handler.setTarget(None)&#10;&#10;    insert call to gracefully shutdown logging system&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;A handler can be removed from a logger using the Logger's removeHandler().&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;At some point in your life with the logging module, you will encounter a problem&#10;with duplicate log messages. The likely cause is an extra handler was inserted&#10;somewhere in your logger hierarchy. Since log messages are sent up the&#10;hierarchy to each handler, you can get the same output duplicated. One extremely&#10;useful module to use in debugging problems like this is the &quot;logging_tree&quot;&#10;module by Brandon Rhodes. I encourage you to try this module after this course.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this code, we are simulating two stream handlers that have been added to&#10;our logging hierarchy.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Add the necessary code to leave the root handler, but remove all the handlers&#10;from the &quot;A.B&quot; logger. Since, removeHandler() takes a handler object, we&#10;have to get the handler from the handlers attribute on the Logger.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Removing handlers" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202550" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0].replace('&quot;', &quot;'&quot;)&#10;    if placeholder == &quot;'A.B'&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;    placeholder = placeholders[1]&#10;    if placeholder == &quot;b_log.removeHandler(handler)&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857772000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="remove_handler.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="'A.B'" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="21" />
                                          <option name="offset" value="583" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="21" />
                                      <option name="offset" value="583" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter the logger name" />
                                      <option name="possibleAnswer" value="'A.B'" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="b_log.removeHandler(handler)" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="45" />
                                          <option name="offset" value="727" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="45" />
                                      <option name="offset" value="727" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="insert code to remove handler from A.B logger" />
                                      <option name="possibleAnswer" value="b_log.removeHandler(handler)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="remove_handler.py" />
                                <option name="text" value="import logging&#10;&#10;def setup_loggers():&#10;    stream_handler = logging.StreamHandler()&#10;    fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')&#10;    stream_handler.setFormatter(fmt)&#10;&#10;    root = logging.getLogger()&#10;    root.addHandler(stream_handler)&#10;    #root.setLevel(logging.DEBUG)&#10;&#10;    b_log = logging.getLogger('A.B')&#10;    b_log.addHandler(stream_handler)&#10;&#10;&#10;if __name__ == '__main__':&#10;    setup_loggers()&#10;&#10;    c_log = logging.getLogger('A.B.C')&#10;    c_log.warn('This message should be output once to console (but is output twice instead)')&#10;&#10;    b_log = logging.getLogger(enter the logger name)&#10;&#10;    # Remove all handlers attached to logger&#10;    while len(b_log.handlers):&#10;        handler = b_log.handlers[0]&#10;        insert code to remove handler from A.B logger&#10;&#10;    c_log.warn('This message should be output once to console')&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="28800" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="50399" />
                <option name="index" value="5" />
                <option name="name" value="Filtering" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1513857802000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;The Filter object allows fine grained control over what is included in the log output.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You add Filter objects to Loggers or Handlers using the addFilter() method. You can also have more than one filter attached to each object.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The LogRecord object for every log message is passed to the entire list of attached Filter objects. If a Filter&#10;returns a 0 value, the LogRecord is dropped and no further processing is done.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;The base Filter object filters based on a name in the module hierarchy. This usually is not very useful, therefore&#10;you will more often see new Filters inheriting from the base Filter object and implement more unique behavior. There&#10;are several examples of custom Filter objects in this course.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Filters when applied to Logger objects are only checked when you call a log method on that object in the hierarchy.&#10;This is in contrast to Filters applied to Handler objects which are caller whenever a log record gets to the handler.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, you can see how we have to add the Filter to each instance of our logger.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Filter object" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202551" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        ['addFilter(log_filter)'],&#10;        ['addFilter(log_filter)'],&#10;        ['addFilter(log_filter)']&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857797000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="filter.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="addFilter(log_filter)" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="36" />
                                          <option name="offset" value="176" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="36" />
                                      <option name="offset" value="176" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="add the filter object to this logger" />
                                      <option name="possibleAnswer" value="addFilter(log_filter)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="addFilter(log_filter)" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="36" />
                                          <option name="offset" value="316" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="36" />
                                      <option name="offset" value="316" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="add the filter object to this logger" />
                                      <option name="possibleAnswer" value="addFilter(log_filter)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="addFilter(log_filter)" />
                                        </list>
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="36" />
                                          <option name="offset" value="454" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="36" />
                                      <option name="offset" value="454" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="add the filter object to this logger" />
                                      <option name="possibleAnswer" value="addFilter(log_filter)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="filter.py" />
                                <option name="text" value="import logging&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;&#10;    log_filter = logging.Filter('A')&#10;&#10;    logger1 = logging.getLogger('A')&#10;    logger1.add the filter object to this logger&#10;    logger1.debug('This is written to log output')&#10;&#10;    logger2 = logging.getLogger('A.B')&#10;    logger2.add the filter object to this logger&#10;    logger2.debug('This is written to log output')&#10;&#10;    logger3 = logging.getLogger('B')&#10;    logger3.add the filter object to this logger&#10;    logger3.debug('This is NOT written to log output, because only names start with &quot;B&quot; are allowed by filter')&#10;&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;Filter objects can also perform in-place modification of LogRecord attributes. This can include changing values or&#10;adding new attributes.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;If you are developing a system that contains private user information, such as social security numbers, you should&#10;take extra precautions to protect that data. That should include any log messages that might reference that private&#10;data.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, we have created a Filter which sanitizes (hides) U.S. social security numbers. This&#10;is done by using a regular expression that searches for a given pattern. If it finds a match, that text is replaced with&#10;a generic placeholder value (XXX-XX-XXXX).&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;1) A Filter should return a non-zero value if the log record should be passed to the handler or a 0 value if the filter&#10;should exclude the record. Update the return value for the SanitizeSSNFilter object we have created.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;2) Update the logging configuration to add this filter object to the root logger.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Sanitize filter" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202552" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    try:&#10;        int_value = int(placeholder)&#10;        if int_value &gt; 0:&#10;            passed()&#10;        else:&#10;            failed()&#10;&#10;    except ValueError:&#10;        if placeholder == 'True':&#10;            passed()&#10;        else:&#10;            failed()&#10;&#10;    placeholder = placeholders[1]&#10;    if placeholder == 'root.addFilter(sanitize_filter)':&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857797000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="sanitize_filter.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="The value should be non-zero, since we are only updating the data and excluding any log records.&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="35" />
                                          <option name="offset" value="448" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="35" />
                                      <option name="offset" value="448" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="insert the appropriate return value" />
                                      <option name="possibleAnswer" value="2" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="call the method 'addHandler' on the root logger instance and pass in the sanitize_filter object." />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="40" />
                                          <option name="offset" value="635" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="40" />
                                      <option name="offset" value="635" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="add the filter object to the root logger" />
                                      <option name="possibleAnswer" value="root.addFilter(sanitize_filter)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="sanitize_filter.py" />
                                <option name="text" value="import logging&#10;import re&#10;&#10;class SanitizeSSNFilter(logging.Filter):&#10;    def filter(self, record):&#10;        def replace_ssn(value):&#10;            return re.sub('\d\d\d-\d\d-\d\d\d\d', 'XXX-XX-XXXX', value)&#10;&#10;        record.msg = replace_ssn(record.msg)&#10;        if record.args:&#10;            newargs = [replace_ssn(arg) if isinstance(arg, str)&#10;                       else arg for arg in record.args]&#10;            record.args = tuple(newargs)&#10;&#10;        return insert the appropriate return value&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;&#10;    sanitize_filter = SanitizeSSNFilter()&#10;    root = logging.getLogger()&#10;    add the filter object to the root logger&#10;&#10;    root.debug('Nothing filtered here; user_id=%s', '100')&#10;    root.debug('Log message containing a SSN=000-01-1000')&#10;    root.warn('Log message containing a SSN=%s', '000-01-1001')&#10;    root.debug('Log message containing a SSN=%s' % '000-01-1100')&#10;    root.info('Log event: user_id=%s, SSN=%s, status=%d, result=%s', '100', '000-01-1100', 2, True)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;When you log a message to a Logger, any Handler object's added to that Logger are going to emit the output.&#10;Given that Loggers are in a hierarchy, some of your child loggers may not have any Handler's attached. This would&#10;be a pain if you had to configure a Handler for every Logger child object. For this reason, every LogRecord will&#10;be passed to the parent Logger. And that will be passed to the Handler object's attached to that parent, this continues&#10;all the way up to the Root logger.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;That's why adding a Handler at the Root level will output the log records.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In some cases you may not want this behavior, so in this task, set the 'propagate' attribute on the &quot;logger3&quot;&#10;instance to False to prevent the log record from being passed to the parent logger handler.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;If you are running Python 2.7, then after you execute this code you will notice the message&#10;&quot;No handlers could be found for logger &quot;B&quot;&quot;.  In the next task we can show how to eliminate this warning.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Logger propagate" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202553" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;False&quot; or placeholder == '0':&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857797000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="propagate1.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Setting a False value will disable propagation to parent handlers." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="42" />
                                          <option name="offset" value="368" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="42" />
                                      <option name="offset" value="368" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="disable log propagation to parent handlers" />
                                      <option name="possibleAnswer" value="0" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="propagate1.py" />
                                <option name="text" value="import logging&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;&#10;    log_filter = logging.Filter('A')&#10;&#10;    logger1 = logging.getLogger('A')&#10;    logger1.debug('This is written to log output')&#10;&#10;    logger2 = logging.getLogger('A.B')&#10;    logger2.debug('This is written to log output')&#10;&#10;    logger3 = logging.getLogger('B')&#10;    logger3.propagate = disable log propagation to parent handlers&#10;    logger3.debug('This is NOT written to log output, because only names start with &quot;B&quot; are allowed by filter')&#10;&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In the previous task, disabling propagation on a handler in the hierarchy gave us a warning message, under Python 2.7.&#10;We can explicitly silence this warning by adding a NullHandler handler object to the logger. This&#10;handler does not output any log records. This will work with both Python 2.7 and Python 3.  NullHandler is not available&#10;in Python 2.6 or earlier.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="NullHandler" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202554" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;logger3.addHandler(logging.NullHandler())&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857797000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="null_handler.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logger3.addHandler(logging.NullHandler())" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="29" />
                                          <option name="offset" value="348" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="29" />
                                      <option name="offset" value="348" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="add a null handler to logger3" />
                                      <option name="possibleAnswer" value="logger3.addHandler(logging.NullHandler())" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="null_handler.py" />
                                <option name="text" value="import logging&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;&#10;    log_filter = logging.Filter('A')&#10;&#10;    logger1 = logging.getLogger('A')&#10;    logger1.debug('This is written to log output')&#10;&#10;    logger2 = logging.getLogger('A.B')&#10;    logger2.debug('This is written to log output')&#10;&#10;    logger3 = logging.getLogger('B')&#10;    add a null handler to logger3&#10;    logger3.propagate = False&#10;    logger3.debug('This is NOT written to log output, because only names start with &quot;B&quot; are allowed by filter')&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In a previous task, we showed adding a filter to a Logger object. Since, filters are only applied when the log&#10;method is called on a Logger, the filter has to be added to every logger that needs to have the filter applied. You&#10;can also add a filter to a Handler, and since the log records propagate up the hierarchy, the filter will be applied&#10;by the handler for all log records that reach it.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, add the filter to all the handlers on the root logger.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Filtering on handler" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202555" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        [&quot;logging.getLogger()&quot;, &quot;logging.root&quot;],&#10;        [&quot;handler.addFilter(log_filter)&quot;]&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857797000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="filtering_handler.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="logging.getLogger()" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="19" />
                                          <option name="offset" value="138" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="19" />
                                      <option name="offset" value="138" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="get the root logger" />
                                      <option name="possibleAnswer" value="logging.getLogger()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="handler.addFilter(log_filter)" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="30" />
                                          <option name="offset" value="200" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="30" />
                                      <option name="offset" value="200" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="add the filter to each handler" />
                                      <option name="possibleAnswer" value="handler.addFilter(log_filter)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="filtering_handler.py" />
                                <option name="text" value="import logging&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;&#10;    log_filter = logging.Filter('A')&#10;&#10;    root = get the root logger&#10;    for handler in root.handlers:&#10;        add the filter to each handler&#10;&#10;    logger1 = logging.getLogger('A')&#10;    logger1.debug('This is written to log output')&#10;&#10;    logger2 = logging.getLogger('A.B')&#10;    logger2.debug('This is written to log output')&#10;&#10;    logger3 = logging.getLogger('B')&#10;    logger3.debug('This is NOT written to log output, because only names start with &quot;B&quot; are allowed by filter')&#10;&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="28801" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="50400" />
                <option name="index" value="6" />
                <option name="name" value="Configuration" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1513857833000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In previous tasks we have manually configured logging objects and we have used basicConfig().&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You can also load logging configuration from a file using &quot;logging.fileConfig()&quot;. This function takes the&#10;filename of a ConfigParser based file.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;For the purpose of this course, we are going to write this file from the task code. In normal circumstances, you&#10;would maintain this configuration data in a separate file.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Every logging config file needs to have the following sections: [loggers], [formatters] and [handlers]&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Each section needs a name specified &quot;keys&quot;. The value could be one or more additional configuration sections&#10;you have to create. And each of those is going to contain name/value pairs based on the type of section.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In the next few tasks we are going to explain this one small step at a time&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this first task, we need to identify an instance name for a Formatter type object. Use the name &quot;formatter1&quot;&#10;in this task, although the name is an arbitrary identifier. You just have to use the same whenever you reference&#10;the same object.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Notice under the &quot;[formatter_formatter1]&quot; section there is another key/value pair for &quot;format&quot;. This is the&#10;format string we have encountered in previous tasks. This is used to initialize the &quot;formatter1&quot; instance.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="fileConfig formatters" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202556" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        [&quot;formatter1&quot;],&#10;        [&quot;formatter1&quot;],&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857828000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="file_config_formatters.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="formatter1&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="39" />
                                          <option name="offset" value="69" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="39" />
                                      <option name="offset" value="69" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter a name for a new formatter object" />
                                      <option name="possibleAnswer" value="formatter1" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="formatter1&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="27" />
                                          <option name="offset" value="168" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="27" />
                                      <option name="offset" value="168" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="add the formatter name here" />
                                      <option name="possibleAnswer" value="formatter1" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="file_config_formatters.py" />
                                <option name="text" value="import logging&#10;import logging.config&#10;&#10;config = &quot;&quot;&quot;&#10;[formatters]&#10;keys=enter a name for a new formatter object&#10;&#10;[handlers]&#10;keys=handler1&#10;&#10;[loggers]&#10;keys=root&#10;&#10;[formatter_add the formatter name here]&#10;format=%(asctime)s %(levelname)s %(message)s&#10;&#10;[handler_handler1]&#10;class=StreamHandler&#10;args=()&#10;formatter=formatter1&#10;&#10;[logger_root]&#10;handlers=handler1&#10;level=DEBUG&#10;&quot;&quot;&quot;&#10;&#10;config_filename = 'logging.ini'&#10;&#10;def write_config_file(filename, data):&#10;    with open(filename, 'w') as fp:&#10;        fp.write(data)&#10;&#10;&#10;if __name__ == '__main__':&#10;    write_config_file(config_filename, config)&#10;&#10;    logging.config.fileConfig(config_filename)&#10;&#10;    logging.debug('this is a debug message')&#10;    logging.warning('this is a warning message')&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In this task, we need to identify an instance name for a Handler object. Use the name &quot;handler1&quot;. Again, the&#10;name is arbitrary, but has to match references to the same object.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Notice under &quot;[handler_handler1]&quot;, there are some additional keys used to initialize the &quot;handler1&quot; instance:&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&quot;class&quot; is the logging module class name (example: StreamHandler or FileHandler).&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&quot;args&quot; is a  tuple containing the arguments to the class constructor. Here we are going to use the default arguments, so&#10;are specifying an empty tuple.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&quot;formatter&quot; is a key reference to a Formatter object. Here we are using &quot;formatter1&quot; because that is the instance&#10;we created in the previous task.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="fileConfig handlers" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202557" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        [&quot;handler1&quot;],&#10;        [&quot;handler1&quot;],&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857828000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="file_config_handlers.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="handler1" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="40" />
                                          <option name="offset" value="97" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="40" />
                                      <option name="offset" value="97" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter instance name for a handler object" />
                                      <option name="possibleAnswer" value="handler1" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="handler1" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="40" />
                                          <option name="offset" value="238" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="40" />
                                      <option name="offset" value="238" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter instance name for a handler object" />
                                      <option name="possibleAnswer" value="handler1" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="file_config_handlers.py" />
                                <option name="text" value="import logging&#10;import logging.config&#10;&#10;config = &quot;&quot;&quot;&#10;[formatters]&#10;keys=formatter1&#10;&#10;[handlers]&#10;keys=enter instance name for a handler object&#10;&#10;[loggers]&#10;keys=root&#10;&#10;[formatter_formatter1]&#10;format=%(asctime)s %(levelname)s %(message)s&#10;&#10;[handler_enter instance name for a handler object]&#10;class=StreamHandler&#10;args=()&#10;formatter=formatter1&#10;&#10;[logger_root]&#10;handlers=handler1&#10;level=DEBUG&#10;&quot;&quot;&quot;&#10;&#10;config_filename = 'logging.ini'&#10;&#10;def write_config_file(filename, data):&#10;    with open(filename, 'w') as fp:&#10;        fp.write(data)&#10;&#10;&#10;if __name__ == '__main__':&#10;    write_config_file(config_filename, config)&#10;&#10;    logging.config.fileConfig(config_filename)&#10;&#10;    logging.debug('this is a debug message')&#10;    logging.warning('this is a warning message')&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In this task we will configure our root Logger instance. This is done using the instance name &quot;root&quot;.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Under the &quot;[logger_root]&quot; section we need to configure additional key/values to complete the instance configuration:&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&quot;handlers&quot; is a list of key names for each instance of a handler we want to add to this Logger instance.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&quot;level&quot; is the log severity level&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="fileConfig loggers" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202558" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        [&quot;root&quot;],&#10;        [&quot;root&quot;],&#10;        [&quot;handler1&quot;]&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857828000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="file_config_loggers.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="root" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="31" />
                                          <option name="offset" value="122" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="31" />
                                      <option name="offset" value="122" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter root logger instance name" />
                                      <option name="possibleAnswer" value="root" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="root" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="34" />
                                          <option name="offset" value="301" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="34" />
                                      <option name="offset" value="301" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter name of root logger instance" />
                                      <option name="possibleAnswer" value="root" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="handler1" />
                                        </list>
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="30" />
                                          <option name="offset" value="346" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="30" />
                                      <option name="offset" value="346" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter name of handler instance" />
                                      <option name="possibleAnswer" value="handler1" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="file_config_loggers.py" />
                                <option name="text" value="import logging&#10;import logging.config&#10;&#10;config = &quot;&quot;&quot;&#10;[formatters]&#10;keys=formatter1&#10;&#10;[handlers]&#10;keys=handler1&#10;&#10;[loggers]&#10;keys=enter root logger instance name&#10;&#10;[formatter_formatter1]&#10;format=%(asctime)s %(levelname)s %(message)s&#10;&#10;[handler_handler1]&#10;class=StreamHandler&#10;args=()&#10;formatter=formatter1&#10;&#10;[logger_enter name of root logger instance]&#10;handlers=enter name of handler instance&#10;level=DEBUG&#10;&quot;&quot;&quot;&#10;&#10;config_filename = 'logging.ini'&#10;&#10;def write_config_file(filename, data):&#10;    with open(filename, 'w') as fp:&#10;        fp.write(data)&#10;&#10;&#10;if __name__ == '__main__':&#10;    write_config_file(config_filename, config)&#10;&#10;    logging.config.fileConfig(config_filename)&#10;&#10;    logging.debug('this is a debug message')&#10;    logging.warning('this is a warning message')&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In this task, we are going to add a File Handler object to our root logger instance, in addition to our Stream&#10;Handler.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Use the instance name &quot;file&quot; in this task. It could be something else, but all the instances to this object&#10;must be the same.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You will notice, under the [handler_file] section, we are specifying a tuple value with the &quot;args&quot; key. The first&#10;value in this tuple is the filename for this instance of the FileHandler. We are also referencing the same instance&#10;of the Formatter used by the StreamHandler.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="fileConfig multiple handlers" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202559" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        [&quot;file&quot;],&#10;        [&quot;file&quot;],&#10;        [&quot;file&quot;]&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857828000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="file_config_multiple_handlers.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="file" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="32" />
                                          <option name="offset" value="128" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="32" />
                                      <option name="offset" value="128" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter file handler instance name" />
                                      <option name="possibleAnswer" value="file" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="32" />
                                          <option name="offset" value="309" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="32" />
                                      <option name="offset" value="309" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter file handler instance name" />
                                      <option name="possibleAnswer" value="file" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="file" />
                                        </list>
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="32" />
                                          <option name="offset" value="465" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="32" />
                                      <option name="offset" value="465" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter file handler instance name" />
                                      <option name="possibleAnswer" value="file" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="file_config_multiple_handlers.py" />
                                <option name="text" value="import logging&#10;import logging.config&#10;&#10;config = &quot;&quot;&quot;&#10;[loggers]&#10;keys=root&#10;&#10;[formatters]&#10;keys=formatter1&#10;&#10;[handlers]&#10;keys=handler1, enter file handler instance name&#10;&#10;[formatter_formatter1]&#10;format=%(asctime)s %(levelname)s %(message)s&#10;&#10;[handler_handler1]&#10;class=StreamHandler&#10;args=()&#10;formatter=formatter1&#10;&#10;[handler_enter file handler instance name]&#10;class=FileHandler&#10;args=(&quot;../../Sandbox/file_config_example.log&quot;, )&#10;formatter=formatter1&#10;&#10;[logger_root]&#10;handlers=handler1, enter file handler instance name&#10;level=DEBUG&#10;&quot;&quot;&quot;&#10;&#10;config_filename = 'logging.ini'&#10;&#10;def write_config_file(filename, data):&#10;    with open(filename, 'w') as fp:&#10;        fp.write(data)&#10;&#10;&#10;if __name__ == '__main__':&#10;    write_config_file(config_filename, config)&#10;&#10;    logging.config.fileConfig(config_filename)&#10;&#10;    logging.debug('this is a debug message')&#10;    logging.warning('this is a warning message')&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;Logging configuration can also be specified as a Python dictionary. This makes&#10;it very easy to store configuration in an external JSON or YAML file, since parsers&#10;for those formats can return a native Python dict.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;There are four important keys with dictConfig. The first three are the same&#10;as in fileConfig(): &quot;handlers&quot;, &quot;formatters&quot;, &quot;loggers&quot;.  The fourth is&#10;a mandatory &quot;version&quot; key which at this time must be the integer value &quot;1&quot;.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, you can see the structure of this dictionary in the &quot;log_config&quot; variable. The root logger is designated with an empty string '',&#10;under the &quot;loggers&quot; key. And under that key, you can see a &quot;handlers&quot; key which points to the name of an object&#10;defined under the &quot;handlers&quot; section. This is an array of handler keys, since we can have multiple handlers attached&#10;to a logger instance.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;1) Set the proper handler in the root logger&#10;&lt;br&gt;&#10;2) Pass the logging configuration to dictConfig()&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;After you execute this task, you will only see the last WARNING message. We will explain this in the next task.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="dictConfig" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202560" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        ['console'],&#10;        ['log_config']&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857828000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="dict_config.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="The 'handlers' section contains a key called 'console', that is the name of the stream handler." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="40" />
                                          <option name="offset" value="605" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="40" />
                                      <option name="offset" value="605" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="insert name of stream handler object key" />
                                      <option name="possibleAnswer" value="console" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="The variable named &quot;log_config&quot; contains our logging configuration." />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="49" />
                                          <option name="offset" value="711" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="49" />
                                      <option name="offset" value="711" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="pass the dict object containing log configuration" />
                                      <option name="possibleAnswer" value="log_config" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="dict_config.py" />
                                <option name="text" value="import logging&#10;import logging.config&#10;&#10;logger = logging.getLogger(__name__)&#10;&#10;if __name__ == '__main__':&#10;    log_config = {&#10;        'version': 1,&#10;        'handlers': {&#10;            'console': {&#10;                'class': 'logging.StreamHandler',&#10;                'formatter': 'formatter1',&#10;                'stream': 'ext://sys.stdout'&#10;            }&#10;&#10;        },&#10;        'formatters': {&#10;            'formatter1': {&#10;                'format': '%(asctime)s - %(levelname)s - %(message)s'&#10;            }&#10;        },&#10;        'loggers': {&#10;            '': {&#10;                'level': 'DEBUG',&#10;                'handlers': ['insert name of stream handler object key', ]&#10;            }&#10;        }&#10;    }&#10;&#10;    logging.config.dictConfig(pass the dict object containing log configuration)&#10;&#10;    logger.warn('This is a warning')&#10;    logger.debug('test')&#10;&#10;    logging.root.warn('This is a root logger warning')&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In the previous task, only the root logger message was included in the output.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;This is because we created our &quot;logger&quot; instance at module scope, before we called dictConfig().&#10;When dictConfig() was called it disabled any existing loggers. This is the default setting, but you&#10;can override this with the &quot;disable_existing_loggers&quot; key set to the value of &quot;False&quot;, within the&#10;configuration dictionary.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Update the configuration to prevent existing loggers from being disabled.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;After you execute this task, you should see all the log output.&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="dictConfig existing loggers" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202561" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        ['disable_existing_loggers'],&#10;        ['False', 0]&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857828000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="dict_config_existing_loggers.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="The option 'disable_existing_loggers' can be used to override what happens to existing loggers. The default value is &quot;True&quot;." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="21" />
                                          <option name="offset" value="651" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="21" />
                                      <option name="offset" value="651" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="insert name of option" />
                                      <option name="possibleAnswer" value="disable_existing_loggers" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Since we do not want to disable existing loggers, the value should be &quot;False&quot;." />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="19" />
                                          <option name="offset" value="675" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="19" />
                                      <option name="offset" value="675" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="insert option value" />
                                      <option name="possibleAnswer" value="False" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="dict_config_existing_loggers.py" />
                                <option name="text" value="import logging&#10;import logging.config&#10;&#10;logger = logging.getLogger(__name__)&#10;&#10;if __name__ == '__main__':&#10;    log_config = {&#10;        'version': 1,&#10;        'handlers': {&#10;            'console': {&#10;                'class': 'logging.StreamHandler',&#10;                'formatter': 'formatter1',&#10;                'stream': 'ext://sys.stdout'&#10;            }&#10;&#10;        },&#10;        'formatters': {&#10;            'formatter1': {&#10;                'format': '%(asctime)s - %(levelname)s - %(message)s'&#10;            }&#10;        },&#10;        'loggers': {&#10;            '': {&#10;                'level': 'DEBUG',&#10;                'handlers': ['console', ]&#10;            }&#10;        },&#10;        'insert name of option': insert option value&#10;    }&#10;&#10;    logging.config.dictConfig(log_config)&#10;&#10;    logger.warn('This is a warning')&#10;    logger.debug('test')&#10;&#10;    logging.root.warn('This is a root logger warning')&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;There is a shortcut for defining the root logger. Instead of having an empty string key ''&#10;under the loggers key, you can create a top-level key called &quot;root&quot;.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="dictConfig root shortcut" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202562" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;root&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857828000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="dict_config_root.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="'root' identifies the root logger." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="25" />
                                          <option name="offset" value="554" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="25" />
                                      <option name="offset" value="554" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter name of root logger" />
                                      <option name="possibleAnswer" value="root" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="dict_config_root.py" />
                                <option name="text" value="import logging&#10;import logging.config&#10;&#10;logger = logging.getLogger(__name__)&#10;&#10;if __name__ == '__main__':&#10;    log_config = {&#10;        'version': 1,&#10;        'disable_existing_loggers': False,&#10;        'handlers': {&#10;            'console': {&#10;                'class': 'logging.StreamHandler',&#10;                'formatter': 'formatter1',&#10;                'stream': 'ext://sys.stdout'&#10;            }&#10;&#10;        },&#10;        'formatters': {&#10;            'formatter1': {&#10;                'format': '%(asctime)s - %(levelname)s - %(message)s'&#10;            }&#10;        },&#10;        'enter name of root logger': {&#10;            'level': 'DEBUG',&#10;            'handlers': ['console', ]&#10;        }&#10;    }&#10;&#10;    logging.config.dictConfig(log_config)&#10;&#10;    logger.warn('This is a warning')&#10;    logger.debug('test')&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="28802" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="50401" />
                <option name="index" value="7" />
                <option name="name" value="Customization" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1513857856000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;Writing your log messages out as structured JSON objects allows you to write programs to easily process your logs.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, we have created a new object called JSONFormatter that inherits from Formatter. The most important&#10;method to implement is the &quot;format()&quot; method which returns a string to be passed to a Handler.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, add the call to set this new formatter on the StreamHandler instance.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="JSON Formatter" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202563" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        ['handler.setFormatter(fmt)', 'handler.setFormatter(fmt=fmt)']&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857850000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="json_formatter.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Call handler.setFormatter() passing the formatter object." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="32" />
                                          <option name="offset" value="760" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="32" />
                                      <option name="offset" value="760" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="add the formatter to the handler" />
                                      <option name="possibleAnswer" value="handler.setFormatter(fmt)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="json_formatter.py" />
                                <option name="text" value="import logging&#10;import json&#10;import datetime&#10;import traceback&#10;&#10;class JsonFormatter(logging.Formatter):&#10;    def format(self, record):&#10;        if record.exc_info:&#10;            exc = traceback.format_exception(*record.exc_info)&#10;        else:&#10;            exc = None&#10;&#10;        return json.dumps({&#10;            'msg': record.msg % record.args,&#10;            'timestamp': datetime.datetime.utcfromtimestamp(record.created).isoformat() + 'Z',&#10;            'func': record.funcName,&#10;            'level': record.levelname,&#10;            'module': record.module,&#10;            'process_id': record.process,&#10;            'thread_id': record.thread,&#10;            'exception': exc&#10;        })&#10;&#10;if __name__ == '__main__':&#10;    handler = logging.StreamHandler()&#10;&#10;    fmt = JsonFormatter()&#10;    add the formatter to the handler&#10;&#10;    root_logger = logging.getLogger()&#10;    root_logger.setLevel(logging.DEBUG)&#10;    root_logger.addHandler(handler)&#10;&#10;    try:&#10;        raise Exception('This is an exception')&#10;    except:&#10;        root_logger.exception('caught exception')&#10;&#10;    root_logger.warn('this is a test message')&#10;    root_logger.debug('this request_id=%d name=%s', 1, 'John')&#10;&#10;&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;In a previous lesson we demonstrated the MemoryHandler class. This handler buffers log records and sends them&#10;to another handler after a specified number of records or a specified severity level is received.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;With one small change we can make a smarter version of this handler that only writes to another handler when an ERROR or&#10;higher message is logged. We could run our root logger at the DEBUG level, but instead of writing these to a file&#10;after a specified capacity is reached, we discard the oldest records until an ERROR or higher level log message.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You can see how we implemented this in the shouldFlush() method of our SmartMemoryHandler.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;For this task, create a new instance of our SmartMemoryHandler using the same options as we used for our MemoryHandler.&#10;You can see this commented out above the answer placeholder.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;After you execute this code, you can load the file &quot;smart_memory_handler.log&quot; located under the Sandbox folder. Collapse&#10;and Expand this folder to ensure the file listing is refreshed. In this file you can see that there are only 2 log&#10;messages (as we specified). Only the most recent DEBUG message was included in the output. You can see how in this&#10;example this has given us enough information to help troubleshoot the exception.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Smart memory handler" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202564" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;SmartMemoryHandler(capacity=2, target=file_handler)&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857850000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="smart_memory_handler.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="SmartMemoryHandler(capacity=2, target=file_handler)" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="49" />
                                          <option name="offset" value="1586" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="49" />
                                      <option name="offset" value="1586" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="use our SmartMemoryHandler with same options here" />
                                      <option name="possibleAnswer" value="SmartMemoryHandler(capacity=2, target=file_handler)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="smart_memory_handler.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;import logging.handlers&#10;&#10;logger = logging.getLogger('mortgage')&#10;&#10;&#10;class SmartMemoryHandler(logging.handlers.MemoryHandler):&#10;    def shouldFlush(self, record):&#10;        if record.levelno &gt;= self.flushLevel:&#10;            return True&#10;        elif len(self.buffer) &gt;= self.capacity:&#10;            self.buffer = self.buffer[1:]&#10;        return False&#10;&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    result = None&#10;    try:&#10;        mon_rate = get_current_rate(years)/1200&#10;        payments = years * 12&#10;        logger.debug('Number of monthly payments %d', payments)&#10;        result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;        logger.debug('Calculated result is %f', result)&#10;    except:&#10;        logger.exception('caught exception')&#10;&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;&#10;    log_filename = '../../Sandbox/smart_memory_handler.log'&#10;    file_handler = logging.FileHandler(log_filename, mode='w')&#10;&#10;    fmt = logging.Formatter('%(asctime)s %(levelname)s %(message)s')&#10;    file_handler.setFormatter(fmt)&#10;&#10;    # memory_handler = logging.handlers.MemoryHandler(capacity=2, target=file_handler)&#10;&#10;    memory_handler = use our SmartMemoryHandler with same options here&#10;    root_logger = logging.getLogger()&#10;    root_logger.addHandler(memory_handler)&#10;    root_logger.setLevel(logging.DEBUG)&#10;&#10;    # generate a bunch of debug messages to show they are not written out&#10;    for i in range(1, 100):&#10;        logging.debug('test %d', i)&#10;&#10;    payment = get_monthly_payment(100000, 0)&#10;    print('Monthly payment is %s' % payment)&#10;&#10;    # Remove file handler target to prevent logging.shutdown() from explicitly&#10;    # flushing all handlers, causing any recent DEBUG output to be written&#10;    # to the FileHandler.&#10;    memory_handler.setTarget(None)&#10;&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;The standard library does not include a database handler for storing log messages in a database. The Python logging&#10;system is easy to extend with our own database logging. Having log data in a database is useful for writing queries&#10;and reports against your log data.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this example, we have created a SQLite database handler. Since, the SQLite&#10;database module is included in the standard library, you don't have to&#10;install any databases.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;This custom handler will attempt to create the database table named 'logger' with&#10;the necessary schema to store most of the LogRecord attributes.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In the Handler's emit() method we will insert the LogRecord data into the table.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;At the end of the task we write several queries to the database.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Database Handler" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202565" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;emit&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857850000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="db_handler.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="emit" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="62" />
                                          <option name="offset" value="770" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="62" />
                                      <option name="offset" value="770" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="insert the method name used by a handler to output log records" />
                                      <option name="possibleAnswer" value="emit" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="db_handler.py" />
                                <option name="text" value="from __future__ import print_function&#10;import logging&#10;import logging.config&#10;import datetime&#10;import sqlite3 as sqlite&#10;&#10;&#10;class DatabaseHandler(logging.Handler):&#10;    &quot;&quot;&quot; Store log records in a sqlite database.&#10;    &quot;&quot;&quot;&#10;    def __init__(self, filename):&#10;        super(DatabaseHandler, self).__init__()&#10;        self.db = sqlite.connect(filename)&#10;        try:&#10;            self.db.execute(&#10;                        &quot;CREATE TABLE logger(record_id INTEGER PRIMARY KEY, name TEXT,&quot; \&#10;                        &quot;asctime TEXT, level TEXT, funcName TEXT, lineno INTEGER,&quot; \&#10;                        &quot;module TEXT, message TEXT);&quot;)&#10;            self.db.commit()&#10;&#10;        except sqlite.OperationalError as e:&#10;            logging.info('database filename=%s already exists', filename)&#10;&#10;&#10;    def insert the method name used by a handler to output log records(self, record):&#10;        if self.db:&#10;            timestring = datetime.datetime.utcfromtimestamp(record.created).isoformat() + 'Z'&#10;            message = record.msg % record.args&#10;&#10;            self.acquire()&#10;            try:&#10;                self.db.execute(&quot;INSERT INTO logger(name, asctime, level, funcName, lineno, module, message) &quot; \&#10;                    &quot;VALUES(?, ?, ?, ?, ?, ?, ?);&quot;,&#10;                    (record.name, timestring, record.levelname, record.funcName, record.lineno, record.module, message))&#10;                self.db.commit()&#10;            finally:&#10;                self.release()&#10;&#10;    def close(self):&#10;        self.db.close()&#10;        self.db = None&#10;        super(DatabaseHandler, self).close()&#10;&#10;&#10;if __name__ == '__main__':&#10;    db_filename = '../../Sandbox/log.db'&#10;&#10;    log_config = {&#10;        'version': 1,&#10;        'handlers': {&#10;            'db': {&#10;                'class': 'db_handler.DatabaseHandler',&#10;                'filename': db_filename&#10;            }&#10;        },&#10;        'root': {&#10;            'handlers': ['db'],&#10;            'level': 'DEBUG'&#10;        }&#10;    }&#10;&#10;&#10;    logging.config.dictConfig(log_config)&#10;    logging.debug('Configured logging to database filename=%s', db_filename)&#10;&#10;    logging.warn('root logger warning message')&#10;    logging.debug('Connecting to database to read warning counts')&#10;&#10;    db = sqlite.connect(db_filename)&#10;    result = db.execute('select count(*) from logger where level=&quot;WARNING&quot;')&#10;    print('Number of WARNING log messages in database is %s' % result.fetchone()[0])&#10;&#10;    result = db.execute('select count(*) from logger where level=&quot;DEBUG&quot;')&#10;    print('Number of DEBUG log messages in database is %s' % result.fetchone()[0])&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;This task demonstrates how you can use a Filter to inject attributes into a LogRecord,&#10;and then format those attributes using a Formatter. This can be done in the Filter's &quot;filter()&quot; method, which&#10;is passed the &quot;record&quot; object containing the log attributes.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;This task also demonstrates how a Filter() can be configured using dictConfig(),&#10;something that is not possible using fileConfig().  In this example,&#10;the class name is specified directly in Python code.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, we have defined a &quot;LogUserInjector&quot; filter class. It exposes a public method &quot;set_userid()&quot; that can be&#10;called to set the current user ID. It stores this value in thread local storage, so each thread of execution can&#10;maintain a unique value while the thread is running, or until the next call to set the user ID. As log messages in the thread&#10;are logged, they are passed to our filter. The filter reads the user ID from thread local storage and injects&#10;this value into the LogRecord. We also added &quot;%(user_id)s&quot; to our formatting string, so every log message will&#10;contain this attribute.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Injecting data" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202566" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    answers = [&#10;        [&quot;filter&quot;],&#10;        [&quot;True&quot;, &quot;1&quot;]&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857850000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="inject_filter.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="filter" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="51" />
                                          <option name="offset" value="171" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="51" />
                                      <option name="offset" value="171" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter the name of the method used to filter records" />
                                      <option name="possibleAnswer" value="filter" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="A non-zero value (1 or True) can be used to allow filter records to be handled.&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="60" />
                                          <option name="offset" value="309" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="60" />
                                      <option name="offset" value="309" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter the return value to always allow records to be handled" />
                                      <option name="possibleAnswer" value="True" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="inject_filter.py" />
                                <option name="text" value="import logging&#10;import time&#10;import random&#10;import logging.config&#10;import threading&#10;&#10;class LogUserInjector(logging.Filter):&#10;    thread_local_data = threading.local()&#10;&#10;    def enter the name of the method used to filter records(self, record):&#10;        record.user_id = self.thread_local_data.user_id&#10;        return enter the return value to always allow records to be handled&#10;&#10;    @classmethod&#10;    def set_userid(cls, user_id):&#10;        cls.thread_local_data.user_id = user_id&#10;&#10;&#10;def simulate_user(user_id):&#10;    LogUserInjector.set_userid(user_id)&#10;&#10;    logging.debug('user logged_in')&#10;    time.sleep(random.random())&#10;    logging.debug('user performed some activity')&#10;    time.sleep(random.random())&#10;    logging.debug('user logged_out')&#10;    time.sleep(random.random())&#10;&#10;&#10;if __name__ == '__main__':&#10;&#10;    log_config = {&#10;        'version': 1,&#10;        'formatters': {&#10;            'with_uid': {&#10;                'format': '%(levelname)s - %(asctime)s - %(thread)s UID=%(user_id)d - %(message)s'&#10;            }&#10;        },&#10;        'handlers': {&#10;            'stderr': {&#10;                'class': 'logging.StreamHandler',&#10;                'formatter': 'with_uid',&#10;                'filters': ['uid']&#10;            }&#10;        },&#10;        'filters': {&#10;            'uid': {&#10;                '()': LogUserInjector&#10;            }&#10;        },&#10;        'root': {&#10;            'handlers': ['stderr'],&#10;            'level': 'DEBUG'&#10;        }&#10;    }&#10;&#10;    logging.config.dictConfig(log_config)&#10;&#10;    threads = []&#10;    for user_id in [1, 5, 2, 3]:&#10;        thread = threading.Thread(target=simulate_user, args=(user_id,))&#10;        thread.start()&#10;&#10;    for thread in threads:&#10;        thread.join()&#10;&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="28803" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="50402" />
                <option name="index" value="8" />
                <option name="name" value="Best Practices" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1513857889000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;Logger instances are typically named by using the __name__ builtin. When you organize your modules into packages,&#10;the logger name hierarchy will reflect the package structure. You can take advantage of this by being selective&#10;about logging levels.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;When you run a python script directly, the __name__ will take on the value &quot;__main__&quot;.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, replace the module scoped logger instance using __name__ builtin.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Logger naming" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202567" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;__name__&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857883000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="logger_naming.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="In Python, __name__ contains the current module name." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="38" />
                                          <option name="offset" value="93" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="38" />
                                      <option name="offset" value="93" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="specify the name of the current module" />
                                      <option name="possibleAnswer" value="__name__" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="logger_naming.py" />
                                <option name="text" value="from __future__ import print_function&#10;import math&#10;import logging&#10;&#10;logger = logging.getLogger(specify the name of the current module)&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logger.debug('Number of monthly payments %d', payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logger.debug('Calculated result is %f', result)&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;    payment = get_monthly_payment(100000, 30)&#10;    print('Monthly payment is %f' % payment)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;Most of our Logger instances have been defined at module scope. This is certainly the most convenient way to use&#10;logging, but in some cases you want to have more control over loggers. You can defer creating a logger instance&#10;until it's actually needed.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this example, we show how to create a private logger instance in the class constructor. We use the name of the&#10;current module and append the class name. This will allow us to enable selective logging on just the output from&#10;the class.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;1) Complete the name of the FirstClass logger instance&#10;&lt;br&gt;&#10;2) Set the instance logger level to DEBUG&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You should not see any DEBUG output, except the log messages coming from the FirstClass object.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Private loggers" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202568" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;.first_class&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;    placeholder = placeholders[1]&#10;    if placeholder == &quot;first_logger.setLevel(logging.DEBUG)&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857883000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="private_logger.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="the FirstClass logger name was created with __name__ + '.first_class'&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="32" />
                                          <option name="offset" value="726" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="32" />
                                      <option name="offset" value="726" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="first class logger specific name" />
                                      <option name="possibleAnswer" value=".first_class" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="first_logger.setLevel(logging.DEBUG)" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="30" />
                                          <option name="offset" value="765" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="30" />
                                      <option name="offset" value="765" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="set the logging level to DEBUG" />
                                      <option name="possibleAnswer" value="first_logger.setLevel(logging.DEBUG)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="private_logger.py" />
                                <option name="text" value="import logging&#10;&#10;logger = logging.getLogger(__name__)&#10;&#10;class FirstClass():&#10;    def __init__(self):&#10;        self.log = logging.getLogger(__name__ + '.first_class')&#10;&#10;    def do_something(self):&#10;        self.log.debug('FirstClass do_something() called')&#10;&#10;&#10;class SecondClass():&#10;    def __init__(self):&#10;        self.log = logging.getLogger(__name__ + '.second_class')&#10;&#10;    def do_something(self):&#10;        self.log.debug('SecondClass do_something() called')&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.WARNING)&#10;&#10;    logger.debug('module scope log output')&#10;&#10;    first = FirstClass()&#10;    first.do_something()&#10;&#10;    second = SecondClass()&#10;    second.do_something()&#10;&#10;    first_logger = logging.getLogger(__name__ + 'first class logger specific name')&#10;    set the logging level to DEBUG&#10;    first.do_something()&#10;    second.do_something()&#10;&#10;&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;If you are calling an expensive function and passing the result to a logging statement, you may want to prevent&#10;that function from being called unless the current logging level is going to output the log message.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;This can be done by checking the return value from &quot;isEnabledFor()&quot; on the Logger object. This function takes&#10;the logging level, and if the logger is going to output the message, the return value is True.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this example, the root logger level is set to WARNING. We output a debug level log message, passing in the&#10;result of calculate_expensive_result().  This code executes, even though the debug level message is being filtered out.&#10; &lt;br&gt;&#10;&lt;br&gt;&#10;Add a conditional statement to not log this message if the log level will not apply to the handler.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Conditional logging" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202569" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;if logger.isEnabledFor(logging.DEBUG):&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857883000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="conditional_logging.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Add an &quot;if&quot; conditional call to isEnabledFor() on the logger object passing in the log level you are about to use.&#10;" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="54" />
                                          <option name="offset" value="225" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="54" />
                                      <option name="offset" value="225" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="insert conditional code to test for this logging level" />
                                      <option name="possibleAnswer" value="if logger.isEnabledFor(logging.DEBUG):" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="conditional_logging.py" />
                                <option name="text" value="import logging&#10;import time&#10;&#10;logger = logging.getLogger(__name__)&#10;&#10;def calculate_expensive_result(timeout):&#10;    time.sleep(timeout)&#10;    return 1&#10;&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.WARNING)&#10;&#10;    insert conditional code to test for this logging level&#10;        logger.debug('expensive_result=%d', calculate_expensive_result(5))&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;You should typically not configure any logging handlers if you are writing a library. It is quite obnoxious for&#10;a library developer to do this, since it should be under the control of the developer using your library.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;If you are the developer of the library, then configure your logging handlers in a test application instead.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Let's assume in this task, this is a library module. It explicitly creates a FileHandler and adds it to the module's&#10;logger at file scope. This is &quot;NOT&quot; a good practice.  Let's at least replace this using the NullHandler, which&#10;will not write the logs anywhere.  If the library user wants to log somewhere, he can do that himself at the&#10;application level.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Logging in Libraries" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202570" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;logger.addHandler(logging.NullHandler())&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857883000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="library_logging.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Replace the FileHandler with a NullHandler. NullHandler takes no constructor arguments." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="53" />
                                          <option name="offset" value="74" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="53" />
                                      <option name="offset" value="74" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="logger.addHandler(logging.FileHandler('library.log'))" />
                                      <option name="possibleAnswer" value="logger.addHandler(logging.NullHandler())" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="library_logging.py" />
                                <option name="text" value="# mortgage library&#10;#&#10;import logging&#10;&#10;logger = logging.getLogger(__name__)&#10;logger.addHandler(logging.FileHandler('library.log'))&#10;&#10;def get_current_rate(years):&#10;    logger.debug('Fetching current interest rate for %d years', years)&#10;    rate = 5.3   # Stub external service call&#10;    logger.debug('Service returned interest rate %f', rate)&#10;    return rate&#10;&#10;def get_monthly_payment(principal, years):&#10;    logger.info('Calling mortgage calculator')&#10;&#10;    if years &gt; 50:&#10;        logger.warn('Term greater than 50 years')&#10;&#10;    mon_rate = get_current_rate(years)/1200&#10;    payments = years * 12&#10;    logger.debug('Number of monthly payments %d', payments)&#10;    result = principal * (mon_rate/(1-math.pow((1+mon_rate), -payments)))&#10;&#10;    logger.debug('Calculated result is %f', result)&#10;    logger.debug('Leaving mortgage calculator')&#10;    return result&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;Using the right logging severity levels can be very subjective. This is one of the reasons why it's better to&#10;have fewer logging levels. It is important that you try to use the right level, so that&#10;you can set the most appropriate logging level in your application and not have too much information.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this task, there are some example log messages, and based on the message and context, try to pick the right&#10;severity level for each message.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Remember, this could be very subjective, so click the Hint button to see what is expected.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Using the right levels" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202571" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders, check_answers&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;&#10;    answers = [&#10;        ['INFO', 'DEBUG', 'WARN', 'WARNING'],&#10;        ['ERROR', 'CRITICAL', 'FATAL'],&#10;        ['INFO', 'DEBUG'],&#10;        ['WARN', 'WARNING'],&#10;        ['CRITICAL', 'FATAL'],&#10;        ['DEBUG']&#10;    ]&#10;    check_answers(placeholders, answers)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857883000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="right_levels.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Could depend on the application, but first choice would be INFO. Followed by DEBUG if it happens often. Or even WARN if it's an exception but recoverable case." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="16" />
                                          <option name="offset" value="214" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="16" />
                                      <option name="offset" value="214" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter level name" />
                                      <option name="possibleAnswer" value="INFO" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="If your application can still function without this, or if you can recover, I would mark this as ERROR. But if it's more serious CRITICAL or FATAL." />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="16" />
                                          <option name="offset" value="300" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="16" />
                                      <option name="offset" value="300" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter level name" />
                                      <option name="possibleAnswer" value="ERROR" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Looks like general INFO, since you might want to know this for more than DEBUG purposes. But, DEBUG could be fine too." />
                                        </list>
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="16" />
                                          <option name="offset" value="408" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="16" />
                                      <option name="offset" value="408" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter level name" />
                                      <option name="possibleAnswer" value="INFO" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="Whenever the user enters invalid information, I consider this a WARN, since you might need to investigate why the user might have done this, perhaps due to a usability issue. " />
                                        </list>
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="16" />
                                          <option name="offset" value="490" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="16" />
                                      <option name="offset" value="490" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter level name" />
                                      <option name="possibleAnswer" value="WARN" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="In most application this is so serious you can not continue to function, so this would be CRITICAL or FATAL." />
                                        </list>
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="16" />
                                          <option name="offset" value="606" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="16" />
                                      <option name="offset" value="606" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter level name" />
                                      <option name="possibleAnswer" value="e__ == '" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="This is a low-level operation, so I would consider it DEBUG." />
                                        </list>
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="16" />
                                          <option name="offset" value="687" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="16" />
                                      <option name="offset" value="687" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter level name" />
                                      <option name="possibleAnswer" value="e__ =" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="right_levels.py" />
                                <option name="text" value="import logging&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.DEBUG)&#10;&#10;    user_id = 1001&#10;    ip = '10.0.0.15'&#10;    port = 5555&#10;    account_id = 3551&#10;    version = '1.5.2'&#10;&#10;    logging.log(logging.enter level name, 'Service restarted - version %s', version)&#10;&#10;    logging.log(logging.enter level name, 'Failed to connect to calculator service at ip=%s:%d', ip, port)&#10;&#10;    logging.log(logging.enter level name, 'Created user account id=%d', user_id)&#10;&#10;    logging.log(logging.enter level name, 'User entered invalid account id=%d account_id=%d', user_id, account_id)&#10;&#10;    logging.log(logging.enter level name, 'Could not connect to user database')&#10;&#10;    logging.log(logging.enter level name, 'DB Transaction created for updating user id=%d', user_id)&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;Writing custom logging decorators can help you cut down on some boilerplate logging code.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this example, we want to have our function &quot;do_work&quot; log when the function starts and finishes and also&#10;include how long it took to execute.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;We have written an example decorator for you.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;1) Add the decorator to the &quot;do_work&quot; function&#10;&lt;br&gt;&#10;2) Set the appropriate log level to allow us to see the decorator results.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Using a decorator" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202572" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    if placeholders[0] == &quot;@logging_decorator&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;    if placeholders[1] == &quot;level=logging.DEBUG&quot;:&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857883000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="logging_decorator.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="A decorator can be added by specifying the @ character before the decorator function name." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="42" />
                                          <option name="offset" value="354" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="42" />
                                      <option name="offset" value="354" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="add our logging decorator do this function" />
                                      <option name="possibleAnswer" value="@logging_decorator" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="the decorator using the DEBUG level, so we must configure the root handler to include that level." />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="61" />
                                          <option name="offset" value="528" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="61" />
                                      <option name="offset" value="528" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="configure the log level to ensure we see the decorator output" />
                                      <option name="possibleAnswer" value="level=logging.DEBUG" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="logging_decorator.py" />
                                <option name="text" value="import logging&#10;import time&#10;import functools&#10;&#10;def logging_decorator(f):&#10;    @functools.wraps(f)&#10;    def wrapper(*args, **kwargs):&#10;        logging.debug('Entering %s', f.__name__)&#10;        start = time.time()&#10;        f(*args, **kwargs)&#10;        end = time.time()&#10;        logging.debug('Exiting %s in %-5.2f secs', f.__name__, end-start)&#10;&#10;    return wrapper&#10;&#10;add our logging decorator do this function&#10;def do_work(timeout):&#10;    # Doing something expensive&#10;    time.sleep(timeout)&#10;&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(configure the log level to ensure we see the decorator output)&#10;    do_work(5)&#10;&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;What data to put into a log message can also be subjective. However, it's important to put enough data (context) into high&#10;severity messages to help identify the root cause of a problem.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Many people do not like to run at a DEBUG level all the time, because it generates too much&#10;information and slows down their applications. DEBUG messages are also usually not too useful beyond initial&#10;development. If you want to run at the INFO level and higher (recommended) in normal operations, then you need&#10;those messages to have enough context to be useful in diagnosing problems.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;When an exception occurs, you might want to include some of the input values that were used leading up to that&#10;exception.  If you are working with a database, you might simply need to include the table name and key value, so you&#10;could look up the data later.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;In this example, please include the most relevant piece of context data in the exception logging.&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Just enough context" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="202573" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder.find('service_address') != -1:&#10;        passed()&#10;    else:&#10;        failed('Sorry that is not correct. Check the Hint for more help.')&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_answer_placeholders()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1513857883000" />
                      <option name="taskFiles">
                        <map>
                          <entry key="context.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="It would be useful to know from which service address the connection was refused from." />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="37" />
                                          <option name="offset" value="151" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="37" />
                                      <option name="offset" value="151" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="enter a message with relevent context" />
                                      <option name="possibleAnswer" value="service_address" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="context.py" />
                                <option name="text" value="import logging&#10;&#10;def do_service_lookup(service_address):&#10;    try:&#10;        raise Exception('Connection refused.')&#10;&#10;    except:&#10;        logging.exception(enter a message with relevent context)&#10;&#10;if __name__ == '__main__':&#10;    logging.basicConfig(level=logging.INFO)&#10;&#10;    do_service_lookup('10.0.0.15')&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="28804" />
              </Lesson>
            </list>
          </option>
        </RemoteCourse>
      </option>
      <option name="VERSION" value="9" />
      <option name="myUserTests">
        <map />
      </option>
    </StudyTaskManager>
  </component>
</project>